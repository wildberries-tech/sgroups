// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: sgroups/api.proto

package sgroups

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	common "github.com/wildberries-tech/sgroups/v2/pkg/api/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RuleAction: represents verdict action for rules
type RuleAction int32

const (
	// Undefined verdict action
	RuleAction_UNDEF RuleAction = 0
	// Drops net packet
	RuleAction_DROP RuleAction = 1
	// Accepts net packet
	RuleAction_ACCEPT RuleAction = 2
)

// Enum value maps for RuleAction.
var (
	RuleAction_name = map[int32]string{
		0: "UNDEF",
		1: "DROP",
		2: "ACCEPT",
	}
	RuleAction_value = map[string]int32{
		"UNDEF":  0,
		"DROP":   1,
		"ACCEPT": 2,
	}
)

func (x RuleAction) Enum() *RuleAction {
	p := new(RuleAction)
	*p = x
	return p
}

func (x RuleAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleAction) Descriptor() protoreflect.EnumDescriptor {
	return file_sgroups_api_proto_enumTypes[0].Descriptor()
}

func (RuleAction) Type() protoreflect.EnumType {
	return &file_sgroups_api_proto_enumTypes[0]
}

func (x RuleAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleAction.Descriptor instead.
func (RuleAction) EnumDescriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{0}
}

// DefaultAction: represents default action at end of chains for Security Gpoup
type SecGroup_DefaultAction int32

const (
	// Default is default action in [DROP|ACCEPT]
	SecGroup_DEFAULT SecGroup_DefaultAction = 0
	// Drops net packet
	SecGroup_DROP SecGroup_DefaultAction = 1
	// Accepts net packet
	SecGroup_ACCEPT SecGroup_DefaultAction = 2
)

// Enum value maps for SecGroup_DefaultAction.
var (
	SecGroup_DefaultAction_name = map[int32]string{
		0: "DEFAULT",
		1: "DROP",
		2: "ACCEPT",
	}
	SecGroup_DefaultAction_value = map[string]int32{
		"DEFAULT": 0,
		"DROP":    1,
		"ACCEPT":  2,
	}
)

func (x SecGroup_DefaultAction) Enum() *SecGroup_DefaultAction {
	p := new(SecGroup_DefaultAction)
	*p = x
	return p
}

func (x SecGroup_DefaultAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecGroup_DefaultAction) Descriptor() protoreflect.EnumDescriptor {
	return file_sgroups_api_proto_enumTypes[1].Descriptor()
}

func (SecGroup_DefaultAction) Type() protoreflect.EnumType {
	return &file_sgroups_api_proto_enumTypes[1]
}

func (x SecGroup_DefaultAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecGroup_DefaultAction.Descriptor instead.
func (SecGroup_DefaultAction) EnumDescriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{1, 0}
}

// SyncOp: sync operation
type SyncReq_SyncOp int32

const (
	// NoOp: it meand there is no operation defined as default
	SyncReq_NoOp SyncReq_SyncOp = 0
	// FullSync: Delete+Insert+Update operations (default)
	SyncReq_FullSync SyncReq_SyncOp = 4
	// Upsert: Insert+Update operations
	SyncReq_Upsert SyncReq_SyncOp = 5
	// Delete: Delete operation
	SyncReq_Delete SyncReq_SyncOp = 6
)

// Enum value maps for SyncReq_SyncOp.
var (
	SyncReq_SyncOp_name = map[int32]string{
		0: "NoOp",
		4: "FullSync",
		5: "Upsert",
		6: "Delete",
	}
	SyncReq_SyncOp_value = map[string]int32{
		"NoOp":     0,
		"FullSync": 4,
		"Upsert":   5,
		"Delete":   6,
	}
)

func (x SyncReq_SyncOp) Enum() *SyncReq_SyncOp {
	p := new(SyncReq_SyncOp)
	*p = x
	return p
}

func (x SyncReq_SyncOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncReq_SyncOp) Descriptor() protoreflect.EnumDescriptor {
	return file_sgroups_api_proto_enumTypes[2].Descriptor()
}

func (SyncReq_SyncOp) Type() protoreflect.EnumType {
	return &file_sgroups_api_proto_enumTypes[2]
}

func (x SyncReq_SyncOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncReq_SyncOp.Descriptor instead.
func (SyncReq_SyncOp) EnumDescriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{27, 0}
}

// Network: represents a named IP network
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of network
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// network in CIDR form
	Network *common.Networks_NetIP `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{0}
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetNetwork() *common.Networks_NetIP {
	if x != nil {
		return x.Network
	}
	return nil
}

// SecGroup: represents a security group
type SecGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of security group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// related to security gpoup network(s)
	Networks []string `protobuf:"bytes,2,rep,name=networks,proto3" json:"networks,omitempty"`
	// default_action: represents default rula action
	DefaultAction SecGroup_DefaultAction `protobuf:"varint,3,opt,name=default_action,json=defaultAction,proto3,enum=wb.v2.sgroups.SecGroup_DefaultAction" json:"default_action,omitempty"`
	// trace: set or unset 'nftrace' flag
	Trace bool `protobuf:"varint,4,opt,name=trace,proto3" json:"trace,omitempty"`
	// logs: switch-{ON|OFF} logs in chain
	Logs bool `protobuf:"varint,5,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (x *SecGroup) Reset() {
	*x = SecGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecGroup) ProtoMessage() {}

func (x *SecGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecGroup.ProtoReflect.Descriptor instead.
func (*SecGroup) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{1}
}

func (x *SecGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecGroup) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *SecGroup) GetDefaultAction() SecGroup_DefaultAction {
	if x != nil {
		return x.DefaultAction
	}
	return SecGroup_DEFAULT
}

func (x *SecGroup) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *SecGroup) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

// AccPorts: represents Security Group Rule access source-dest ports
type AccPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source port "num" or port range "num1-num2"
	S string `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	// destination  port "num" or port range "num1-num2"
	D string `protobuf:"bytes,2,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *AccPorts) Reset() {
	*x = AccPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccPorts) ProtoMessage() {}

func (x *AccPorts) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccPorts.ProtoReflect.Descriptor instead.
func (*AccPorts) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{2}
}

func (x *AccPorts) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *AccPorts) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

// RulePriority: represents rule priority or none if we no need use it
type RulePriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*RulePriority_Some
	Value isRulePriority_Value `protobuf_oneof:"value"`
}

func (x *RulePriority) Reset() {
	*x = RulePriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulePriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulePriority) ProtoMessage() {}

func (x *RulePriority) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulePriority.ProtoReflect.Descriptor instead.
func (*RulePriority) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{3}
}

func (m *RulePriority) GetValue() isRulePriority_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *RulePriority) GetSome() int32 {
	if x, ok := x.GetValue().(*RulePriority_Some); ok {
		return x.Some
	}
	return 0
}

type isRulePriority_Value interface {
	isRulePriority_Value()
}

type RulePriority_Some struct {
	Some int32 `protobuf:"varint,1,opt,name=some,proto3,oneof"`
}

func (*RulePriority_Some) isRulePriority_Value() {}

// SgSgRule: represents Security Groups Rule
type SgSgRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// security group at client
	SgFrom string `protobuf:"bytes,1,opt,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	// security group at server
	SgTo string `protobuf:"bytes,2,opt,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
	// ip net transport
	Transport common.Networks_NetIP_Transport `protobuf:"varint,3,opt,name=transport,proto3,enum=common.Networks_NetIP_Transport" json:"transport,omitempty"`
	// access ports set
	Ports []*AccPorts `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	// logs: switch-{ON|OFF} logs in rules
	Logs bool `protobuf:"varint,5,opt,name=logs,proto3" json:"logs,omitempty"`
	// action: represents rule action
	Action RuleAction `protobuf:"varint,6,opt,name=action,proto3,enum=wb.v2.sgroups.RuleAction" json:"action,omitempty"`
	// priority: rule priority affects on rule pos in its rule list
	Priority *RulePriority `protobuf:"bytes,7,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *SgSgRule) Reset() {
	*x = SgSgRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SgSgRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SgSgRule) ProtoMessage() {}

func (x *SgSgRule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SgSgRule.ProtoReflect.Descriptor instead.
func (*SgSgRule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{4}
}

func (x *SgSgRule) GetSgFrom() string {
	if x != nil {
		return x.SgFrom
	}
	return ""
}

func (x *SgSgRule) GetSgTo() string {
	if x != nil {
		return x.SgTo
	}
	return ""
}

func (x *SgSgRule) GetTransport() common.Networks_NetIP_Transport {
	if x != nil {
		return x.Transport
	}
	return common.Networks_NetIP_Transport(0)
}

func (x *SgSgRule) GetPorts() []*AccPorts {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *SgSgRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *SgSgRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEF
}

func (x *SgSgRule) GetPriority() *RulePriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

// FqdnRule: represents Security Groups Rule
type FqdnRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// security group at client
	SgFrom string `protobuf:"bytes,1,opt,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	// FQDN full qualified domain name portable for DNS queries
	FQDN string `protobuf:"bytes,2,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
	// ip net transport
	Transport common.Networks_NetIP_Transport `protobuf:"varint,3,opt,name=transport,proto3,enum=common.Networks_NetIP_Transport" json:"transport,omitempty"`
	// access ports set
	Ports []*AccPorts `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	// logs: switch-{ON|OFF} logs in rules
	Logs bool `protobuf:"varint,5,opt,name=logs,proto3" json:"logs,omitempty"`
	// protocols: L7 protocol list
	// repeated string protocols = 6;
	// action: represents rule action
	Action RuleAction `protobuf:"varint,7,opt,name=action,proto3,enum=wb.v2.sgroups.RuleAction" json:"action,omitempty"`
	// priority: rule priority affects on rule pos in its rule list
	Priority *RulePriority `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *FqdnRule) Reset() {
	*x = FqdnRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FqdnRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FqdnRule) ProtoMessage() {}

func (x *FqdnRule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FqdnRule.ProtoReflect.Descriptor instead.
func (*FqdnRule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{5}
}

func (x *FqdnRule) GetSgFrom() string {
	if x != nil {
		return x.SgFrom
	}
	return ""
}

func (x *FqdnRule) GetFQDN() string {
	if x != nil {
		return x.FQDN
	}
	return ""
}

func (x *FqdnRule) GetTransport() common.Networks_NetIP_Transport {
	if x != nil {
		return x.Transport
	}
	return common.Networks_NetIP_Transport(0)
}

func (x *FqdnRule) GetPorts() []*AccPorts {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FqdnRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *FqdnRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEF
}

func (x *FqdnRule) GetPriority() *RulePriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

// SG:ICMP type rule
type SgIcmpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Security group name
	SG string `protobuf:"bytes,1,opt,name=SG,proto3" json:"SG,omitempty"`
	// ICMP spec
	ICMP *common.ICMP `protobuf:"bytes,2,opt,name=ICMP,proto3" json:"ICMP,omitempty"`
	// logs: switch-{ON|OFF} logs in rules
	Logs bool `protobuf:"varint,3,opt,name=logs,proto3" json:"logs,omitempty"`
	// trace: switch-{ON|OFF} trace in rules
	Trace bool `protobuf:"varint,4,opt,name=trace,proto3" json:"trace,omitempty"`
	// action: represents rule action
	Action RuleAction `protobuf:"varint,5,opt,name=action,proto3,enum=wb.v2.sgroups.RuleAction" json:"action,omitempty"`
}

func (x *SgIcmpRule) Reset() {
	*x = SgIcmpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SgIcmpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SgIcmpRule) ProtoMessage() {}

func (x *SgIcmpRule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SgIcmpRule.ProtoReflect.Descriptor instead.
func (*SgIcmpRule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{6}
}

func (x *SgIcmpRule) GetSG() string {
	if x != nil {
		return x.SG
	}
	return ""
}

func (x *SgIcmpRule) GetICMP() *common.ICMP {
	if x != nil {
		return x.ICMP
	}
	return nil
}

func (x *SgIcmpRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *SgIcmpRule) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *SgIcmpRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEF
}

// SG-SG:ICMP type rule
type SgSgIcmpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Security group name
	SgFrom string `protobuf:"bytes,1,opt,name=sgFrom,proto3" json:"sgFrom,omitempty"`
	// Security group name
	SgTo string `protobuf:"bytes,2,opt,name=sgTo,proto3" json:"sgTo,omitempty"`
	// ICMP spec
	ICMP *common.ICMP `protobuf:"bytes,3,opt,name=ICMP,proto3" json:"ICMP,omitempty"`
	// logs: switch-{ON|OFF} logs in rules
	Logs bool `protobuf:"varint,4,opt,name=logs,proto3" json:"logs,omitempty"`
	// trace: switch-{ON|OFF} trace in rules
	Trace bool `protobuf:"varint,5,opt,name=trace,proto3" json:"trace,omitempty"`
	// action: represents rule action
	Action RuleAction `protobuf:"varint,6,opt,name=action,proto3,enum=wb.v2.sgroups.RuleAction" json:"action,omitempty"`
	// priority: rule priority affects on rule pos in its rule list
	Priority *RulePriority `protobuf:"bytes,7,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *SgSgIcmpRule) Reset() {
	*x = SgSgIcmpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SgSgIcmpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SgSgIcmpRule) ProtoMessage() {}

func (x *SgSgIcmpRule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SgSgIcmpRule.ProtoReflect.Descriptor instead.
func (*SgSgIcmpRule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{7}
}

func (x *SgSgIcmpRule) GetSgFrom() string {
	if x != nil {
		return x.SgFrom
	}
	return ""
}

func (x *SgSgIcmpRule) GetSgTo() string {
	if x != nil {
		return x.SgTo
	}
	return ""
}

func (x *SgSgIcmpRule) GetICMP() *common.ICMP {
	if x != nil {
		return x.ICMP
	}
	return nil
}

func (x *SgSgIcmpRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *SgSgIcmpRule) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *SgSgIcmpRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEF
}

func (x *SgSgIcmpRule) GetPriority() *RulePriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

// CIDR-SG NET-SG Ingress Egress type rule
type IECidrSgRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ip net transport [TCP, UDP]
	Transport common.Networks_NetIP_Transport `protobuf:"varint,1,opt,name=transport,proto3,enum=common.Networks_NetIP_Transport" json:"transport,omitempty"`
	// CIDR subnetwork IPv4|IPv6
	CIDR string `protobuf:"bytes,2,opt,name=CIDR,proto3" json:"CIDR,omitempty"`
	// SG security group name
	SG string `protobuf:"bytes,3,opt,name=SG,proto3" json:"SG,omitempty"`
	// traffic direction [INGERSS, EGRESS]
	Traffic common.Traffic `protobuf:"varint,4,opt,name=traffic,proto3,enum=common.Traffic" json:"traffic,omitempty"`
	// AccPorts: access port set(s)
	Ports []*AccPorts `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	// logs: switch-{ON|OFF} logs in rules
	Logs bool `protobuf:"varint,6,opt,name=logs,proto3" json:"logs,omitempty"`
	// trace: switch-{ON|OFF} logs in rules
	Trace bool `protobuf:"varint,7,opt,name=trace,proto3" json:"trace,omitempty"`
	// action: represents rule action
	Action RuleAction `protobuf:"varint,8,opt,name=action,proto3,enum=wb.v2.sgroups.RuleAction" json:"action,omitempty"`
	// priority: rule priority affects on rule pos in its rule list
	Priority *RulePriority `protobuf:"bytes,9,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *IECidrSgRule) Reset() {
	*x = IECidrSgRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IECidrSgRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IECidrSgRule) ProtoMessage() {}

func (x *IECidrSgRule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IECidrSgRule.ProtoReflect.Descriptor instead.
func (*IECidrSgRule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{8}
}

func (x *IECidrSgRule) GetTransport() common.Networks_NetIP_Transport {
	if x != nil {
		return x.Transport
	}
	return common.Networks_NetIP_Transport(0)
}

func (x *IECidrSgRule) GetCIDR() string {
	if x != nil {
		return x.CIDR
	}
	return ""
}

func (x *IECidrSgRule) GetSG() string {
	if x != nil {
		return x.SG
	}
	return ""
}

func (x *IECidrSgRule) GetTraffic() common.Traffic {
	if x != nil {
		return x.Traffic
	}
	return common.Traffic(0)
}

func (x *IECidrSgRule) GetPorts() []*AccPorts {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *IECidrSgRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *IECidrSgRule) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *IECidrSgRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEF
}

func (x *IECidrSgRule) GetPriority() *RulePriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

// CIDR-SG ICMP <in|e>gress type rule
type IECidrSgIcmpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CIDR subnetwork IPv4|IPv6
	CIDR string `protobuf:"bytes,1,opt,name=CIDR,proto3" json:"CIDR,omitempty"`
	// SG security group name
	SG string `protobuf:"bytes,2,opt,name=SG,proto3" json:"SG,omitempty"`
	// traffic direction [INGERSS, EGRESS]
	Traffic common.Traffic `protobuf:"varint,3,opt,name=traffic,proto3,enum=common.Traffic" json:"traffic,omitempty"`
	// ICMP spec
	ICMP *common.ICMP `protobuf:"bytes,4,opt,name=ICMP,proto3" json:"ICMP,omitempty"`
	// logs: switch-{ON|OFF} logs in rules
	Logs bool `protobuf:"varint,6,opt,name=logs,proto3" json:"logs,omitempty"`
	// trace: switch-{ON|OFF} logs in rules
	Trace bool `protobuf:"varint,7,opt,name=trace,proto3" json:"trace,omitempty"`
	// action: represents rule action
	Action RuleAction `protobuf:"varint,8,opt,name=action,proto3,enum=wb.v2.sgroups.RuleAction" json:"action,omitempty"`
	// priority: rule priority affects on rule pos in its rule list
	Priority *RulePriority `protobuf:"bytes,9,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *IECidrSgIcmpRule) Reset() {
	*x = IECidrSgIcmpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IECidrSgIcmpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IECidrSgIcmpRule) ProtoMessage() {}

func (x *IECidrSgIcmpRule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IECidrSgIcmpRule.ProtoReflect.Descriptor instead.
func (*IECidrSgIcmpRule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{9}
}

func (x *IECidrSgIcmpRule) GetCIDR() string {
	if x != nil {
		return x.CIDR
	}
	return ""
}

func (x *IECidrSgIcmpRule) GetSG() string {
	if x != nil {
		return x.SG
	}
	return ""
}

func (x *IECidrSgIcmpRule) GetTraffic() common.Traffic {
	if x != nil {
		return x.Traffic
	}
	return common.Traffic(0)
}

func (x *IECidrSgIcmpRule) GetICMP() *common.ICMP {
	if x != nil {
		return x.ICMP
	}
	return nil
}

func (x *IECidrSgIcmpRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *IECidrSgIcmpRule) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *IECidrSgIcmpRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEF
}

func (x *IECidrSgIcmpRule) GetPriority() *RulePriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

// SG-SG <in|e>gress type rule
type IESgSgRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ip net transport [TCP, UDP]
	Transport common.Networks_NetIP_Transport `protobuf:"varint,1,opt,name=transport,proto3,enum=common.Networks_NetIP_Transport" json:"transport,omitempty"`
	// Security group name which will be src/dst of traffic when ingress/egress option chosen
	SG string `protobuf:"bytes,2,opt,name=SG,proto3" json:"SG,omitempty"`
	// Security group name which will be src when egress chosen, and dst when ingress
	SgLocal string `protobuf:"bytes,3,opt,name=sg_local,json=sgLocal,proto3" json:"sg_local,omitempty"`
	// traffic direction [INGERSS, EGRESS]
	Traffic common.Traffic `protobuf:"varint,4,opt,name=traffic,proto3,enum=common.Traffic" json:"traffic,omitempty"`
	// AccPorts: access port set(s)
	Ports []*AccPorts `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	// logs: switch-{ON|OFF} logs in rules
	Logs bool `protobuf:"varint,6,opt,name=logs,proto3" json:"logs,omitempty"`
	// trace: switch-{ON|OFF} logs in rules
	Trace bool `protobuf:"varint,7,opt,name=trace,proto3" json:"trace,omitempty"`
	// action: represents rule action
	Action RuleAction `protobuf:"varint,8,opt,name=action,proto3,enum=wb.v2.sgroups.RuleAction" json:"action,omitempty"`
	// priority: rule priority affects on rule pos in its rule list
	Priority *RulePriority `protobuf:"bytes,9,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *IESgSgRule) Reset() {
	*x = IESgSgRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IESgSgRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IESgSgRule) ProtoMessage() {}

func (x *IESgSgRule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IESgSgRule.ProtoReflect.Descriptor instead.
func (*IESgSgRule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{10}
}

func (x *IESgSgRule) GetTransport() common.Networks_NetIP_Transport {
	if x != nil {
		return x.Transport
	}
	return common.Networks_NetIP_Transport(0)
}

func (x *IESgSgRule) GetSG() string {
	if x != nil {
		return x.SG
	}
	return ""
}

func (x *IESgSgRule) GetSgLocal() string {
	if x != nil {
		return x.SgLocal
	}
	return ""
}

func (x *IESgSgRule) GetTraffic() common.Traffic {
	if x != nil {
		return x.Traffic
	}
	return common.Traffic(0)
}

func (x *IESgSgRule) GetPorts() []*AccPorts {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *IESgSgRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *IESgSgRule) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *IESgSgRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEF
}

func (x *IESgSgRule) GetPriority() *RulePriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

// SG-SG:ICMP <in|e>gress type rule
type IESgSgIcmpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Security group name
	SG string `protobuf:"bytes,1,opt,name=SG,proto3" json:"SG,omitempty"`
	// Security group name
	SgLocal string `protobuf:"bytes,2,opt,name=sg_local,json=sgLocal,proto3" json:"sg_local,omitempty"`
	// traffic direction [INGERSS, EGRESS]
	Traffic common.Traffic `protobuf:"varint,3,opt,name=traffic,proto3,enum=common.Traffic" json:"traffic,omitempty"`
	// ICMP spec
	ICMP *common.ICMP `protobuf:"bytes,4,opt,name=ICMP,proto3" json:"ICMP,omitempty"`
	// logs: switch-{ON|OFF} logs in rules
	Logs bool `protobuf:"varint,5,opt,name=logs,proto3" json:"logs,omitempty"`
	// trace: switch-{ON|OFF} trace in rules
	Trace bool `protobuf:"varint,6,opt,name=trace,proto3" json:"trace,omitempty"`
	// action: represents rule action
	Action RuleAction `protobuf:"varint,7,opt,name=action,proto3,enum=wb.v2.sgroups.RuleAction" json:"action,omitempty"`
	// priority: rule priority affects on rule pos in its rule list
	Priority *RulePriority `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *IESgSgIcmpRule) Reset() {
	*x = IESgSgIcmpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IESgSgIcmpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IESgSgIcmpRule) ProtoMessage() {}

func (x *IESgSgIcmpRule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IESgSgIcmpRule.ProtoReflect.Descriptor instead.
func (*IESgSgIcmpRule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{11}
}

func (x *IESgSgIcmpRule) GetSG() string {
	if x != nil {
		return x.SG
	}
	return ""
}

func (x *IESgSgIcmpRule) GetSgLocal() string {
	if x != nil {
		return x.SgLocal
	}
	return ""
}

func (x *IESgSgIcmpRule) GetTraffic() common.Traffic {
	if x != nil {
		return x.Traffic
	}
	return common.Traffic(0)
}

func (x *IESgSgIcmpRule) GetICMP() *common.ICMP {
	if x != nil {
		return x.ICMP
	}
	return nil
}

func (x *IESgSgIcmpRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *IESgSgIcmpRule) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *IESgSgIcmpRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEF
}

func (x *IESgSgIcmpRule) GetPriority() *RulePriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

// SyncStatusResp: db status after last succeeded Sync
type SyncStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last succeeded updated DB timestamp
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SyncStatusResp) Reset() {
	*x = SyncStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusResp) ProtoMessage() {}

func (x *SyncStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusResp.ProtoReflect.Descriptor instead.
func (*SyncStatusResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{12}
}

func (x *SyncStatusResp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// SyncSgSgRules: subject of Security Group Rules to Sync
type SyncSgSgRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// security group rules items
	Rules []*SgSgRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncSgSgRules) Reset() {
	*x = SyncSgSgRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSgSgRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSgSgRules) ProtoMessage() {}

func (x *SyncSgSgRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSgSgRules.ProtoReflect.Descriptor instead.
func (*SyncSgSgRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{13}
}

func (x *SyncSgSgRules) GetRules() []*SgSgRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// SyncFqdnRules: subject of Security Group Rules to Sync
type SyncFqdnRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fqdn rules items
	Rules []*FqdnRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncFqdnRules) Reset() {
	*x = SyncFqdnRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncFqdnRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncFqdnRules) ProtoMessage() {}

func (x *SyncFqdnRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncFqdnRules.ProtoReflect.Descriptor instead.
func (*SyncFqdnRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{14}
}

func (x *SyncFqdnRules) GetRules() []*FqdnRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// SyncSecurityGroups: subject of Security Groups to Sync
type SyncSecurityGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// security group items
	Groups []*SecGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *SyncSecurityGroups) Reset() {
	*x = SyncSecurityGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSecurityGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSecurityGroups) ProtoMessage() {}

func (x *SyncSecurityGroups) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSecurityGroups.ProtoReflect.Descriptor instead.
func (*SyncSecurityGroups) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{15}
}

func (x *SyncSecurityGroups) GetGroups() []*SecGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// SyncNetworks: subject of Networks to Sync
type SyncNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network items
	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *SyncNetworks) Reset() {
	*x = SyncNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNetworks) ProtoMessage() {}

func (x *SyncNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNetworks.ProtoReflect.Descriptor instead.
func (*SyncNetworks) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{16}
}

func (x *SyncNetworks) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

// SyncSgIcmpRules: subject of SG:ICMP to Sync
type SyncSgIcmpRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*SgIcmpRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncSgIcmpRules) Reset() {
	*x = SyncSgIcmpRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSgIcmpRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSgIcmpRules) ProtoMessage() {}

func (x *SyncSgIcmpRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSgIcmpRules.ProtoReflect.Descriptor instead.
func (*SyncSgIcmpRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{17}
}

func (x *SyncSgIcmpRules) GetRules() []*SgIcmpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// SyncSgSgIcmpRules: subject of SG-SG:ICMP to Sync
type SyncSgSgIcmpRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*SgSgIcmpRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncSgSgIcmpRules) Reset() {
	*x = SyncSgSgIcmpRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSgSgIcmpRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSgSgIcmpRules) ProtoMessage() {}

func (x *SyncSgSgIcmpRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSgSgIcmpRules.ProtoReflect.Descriptor instead.
func (*SyncSgSgIcmpRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{18}
}

func (x *SyncSgSgIcmpRules) GetRules() []*SgSgIcmpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// SyncIECidrSgRules: subject of CIDR-SG-[INGRESS|EGRESS] to Sync
type SyncIECidrSgRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*IECidrSgRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncIECidrSgRules) Reset() {
	*x = SyncIECidrSgRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncIECidrSgRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncIECidrSgRules) ProtoMessage() {}

func (x *SyncIECidrSgRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncIECidrSgRules.ProtoReflect.Descriptor instead.
func (*SyncIECidrSgRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{19}
}

func (x *SyncIECidrSgRules) GetRules() []*IECidrSgRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// SyncIESgSgRules: subject of SG-SG-[INGRESS|EGRESS] to Sync
type SyncIESgSgRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SG-SG rules
	Rules []*IESgSgRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncIESgSgRules) Reset() {
	*x = SyncIESgSgRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncIESgSgRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncIESgSgRules) ProtoMessage() {}

func (x *SyncIESgSgRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncIESgSgRules.ProtoReflect.Descriptor instead.
func (*SyncIESgSgRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{20}
}

func (x *SyncIESgSgRules) GetRules() []*IESgSgRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// SyncIESgSgIcmpRules: subject of SG-SG-[INGRESS|EGRESS]:ICMP to Sync
type SyncIESgSgIcmpRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SG-SG icmp rules
	Rules []*IESgSgIcmpRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncIESgSgIcmpRules) Reset() {
	*x = SyncIESgSgIcmpRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncIESgSgIcmpRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncIESgSgIcmpRules) ProtoMessage() {}

func (x *SyncIESgSgIcmpRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncIESgSgIcmpRules.ProtoReflect.Descriptor instead.
func (*SyncIESgSgIcmpRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{21}
}

func (x *SyncIESgSgIcmpRules) GetRules() []*IESgSgIcmpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// SyncIECidrSgIcmpRules: subject of CIDR-SG-[INGRESS|EGRESS]:ICMP to Sync
type SyncIECidrSgIcmpRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CIDR-SG icmp rules
	Rules []*IECidrSgIcmpRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncIECidrSgIcmpRules) Reset() {
	*x = SyncIECidrSgIcmpRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncIECidrSgIcmpRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncIECidrSgIcmpRules) ProtoMessage() {}

func (x *SyncIECidrSgIcmpRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncIECidrSgIcmpRules.ProtoReflect.Descriptor instead.
func (*SyncIECidrSgIcmpRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{22}
}

func (x *SyncIECidrSgIcmpRules) GetRules() []*IECidrSgIcmpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// ListNetworksReq: req to list Networks
type ListNetworksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network names scope; if none then list all netrworks
	NetworkNames []string `protobuf:"bytes,1,rep,name=network_names,json=networkNames,proto3" json:"network_names,omitempty"`
}

func (x *ListNetworksReq) Reset() {
	*x = ListNetworksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksReq) ProtoMessage() {}

func (x *ListNetworksReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksReq.ProtoReflect.Descriptor instead.
func (*ListNetworksReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{23}
}

func (x *ListNetworksReq) GetNetworkNames() []string {
	if x != nil {
		return x.NetworkNames
	}
	return nil
}

// ListNetworksResp: Network list resp
type ListNetworksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network items
	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *ListNetworksResp) Reset() {
	*x = ListNetworksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksResp) ProtoMessage() {}

func (x *ListNetworksResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksResp.ProtoReflect.Descriptor instead.
func (*ListNetworksResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{24}
}

func (x *ListNetworksResp) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

// ListSecurityGroupsReq: req to list Seocurity Groups
type ListSecurityGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SG names scope; if none then list all SGs
	SgNames []string `protobuf:"bytes,1,rep,name=sg_names,json=sgNames,proto3" json:"sg_names,omitempty"`
}

func (x *ListSecurityGroupsReq) Reset() {
	*x = ListSecurityGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityGroupsReq) ProtoMessage() {}

func (x *ListSecurityGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityGroupsReq.ProtoReflect.Descriptor instead.
func (*ListSecurityGroupsReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{25}
}

func (x *ListSecurityGroupsReq) GetSgNames() []string {
	if x != nil {
		return x.SgNames
	}
	return nil
}

// ListSecurityGroupsResp: Security Groups list resp
type ListSecurityGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// security group items
	Groups []*SecGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListSecurityGroupsResp) Reset() {
	*x = ListSecurityGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityGroupsResp) ProtoMessage() {}

func (x *ListSecurityGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityGroupsResp.ProtoReflect.Descriptor instead.
func (*ListSecurityGroupsResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{26}
}

func (x *ListSecurityGroupsResp) GetGroups() []*SecGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// SyncReq: request to apply changes in DB for one of subject [Networks|Sucurity Groups|Security Grpups Rules]
type SyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sync operation to apply to
	SyncOp SyncReq_SyncOp `protobuf:"varint,1,opt,name=sync_op,json=syncOp,proto3,enum=wb.v2.sgroups.SyncReq_SyncOp" json:"sync_op,omitempty"`
	// one of subject
	//
	// Types that are assignable to Subject:
	//
	//	*SyncReq_Groups
	//	*SyncReq_Networks
	//	*SyncReq_SgSgRules
	//	*SyncReq_FqdnRules
	//	*SyncReq_SgIcmpRules
	//	*SyncReq_SgSgIcmpRules
	//	*SyncReq_IeCidrSgRules
	//	*SyncReq_IeSgSgRules
	//	*SyncReq_IeSgSgIcmpRules
	//	*SyncReq_IeCidrSgIcmpRules
	Subject isSyncReq_Subject `protobuf_oneof:"subject"`
}

func (x *SyncReq) Reset() {
	*x = SyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncReq) ProtoMessage() {}

func (x *SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncReq.ProtoReflect.Descriptor instead.
func (*SyncReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{27}
}

func (x *SyncReq) GetSyncOp() SyncReq_SyncOp {
	if x != nil {
		return x.SyncOp
	}
	return SyncReq_NoOp
}

func (m *SyncReq) GetSubject() isSyncReq_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (x *SyncReq) GetGroups() *SyncSecurityGroups {
	if x, ok := x.GetSubject().(*SyncReq_Groups); ok {
		return x.Groups
	}
	return nil
}

func (x *SyncReq) GetNetworks() *SyncNetworks {
	if x, ok := x.GetSubject().(*SyncReq_Networks); ok {
		return x.Networks
	}
	return nil
}

func (x *SyncReq) GetSgSgRules() *SyncSgSgRules {
	if x, ok := x.GetSubject().(*SyncReq_SgSgRules); ok {
		return x.SgSgRules
	}
	return nil
}

func (x *SyncReq) GetFqdnRules() *SyncFqdnRules {
	if x, ok := x.GetSubject().(*SyncReq_FqdnRules); ok {
		return x.FqdnRules
	}
	return nil
}

func (x *SyncReq) GetSgIcmpRules() *SyncSgIcmpRules {
	if x, ok := x.GetSubject().(*SyncReq_SgIcmpRules); ok {
		return x.SgIcmpRules
	}
	return nil
}

func (x *SyncReq) GetSgSgIcmpRules() *SyncSgSgIcmpRules {
	if x, ok := x.GetSubject().(*SyncReq_SgSgIcmpRules); ok {
		return x.SgSgIcmpRules
	}
	return nil
}

func (x *SyncReq) GetIeCidrSgRules() *SyncIECidrSgRules {
	if x, ok := x.GetSubject().(*SyncReq_IeCidrSgRules); ok {
		return x.IeCidrSgRules
	}
	return nil
}

func (x *SyncReq) GetIeSgSgRules() *SyncIESgSgRules {
	if x, ok := x.GetSubject().(*SyncReq_IeSgSgRules); ok {
		return x.IeSgSgRules
	}
	return nil
}

func (x *SyncReq) GetIeSgSgIcmpRules() *SyncIESgSgIcmpRules {
	if x, ok := x.GetSubject().(*SyncReq_IeSgSgIcmpRules); ok {
		return x.IeSgSgIcmpRules
	}
	return nil
}

func (x *SyncReq) GetIeCidrSgIcmpRules() *SyncIECidrSgIcmpRules {
	if x, ok := x.GetSubject().(*SyncReq_IeCidrSgIcmpRules); ok {
		return x.IeCidrSgIcmpRules
	}
	return nil
}

type isSyncReq_Subject interface {
	isSyncReq_Subject()
}

type SyncReq_Groups struct {
	// subject of Security Grpup(s)
	Groups *SyncSecurityGroups `protobuf:"bytes,2,opt,name=groups,proto3,oneof"`
}

type SyncReq_Networks struct {
	// subject of Network(s)
	Networks *SyncNetworks `protobuf:"bytes,3,opt,name=networks,proto3,oneof"`
}

type SyncReq_SgSgRules struct {
	// subject of Security Grpup(s) rule(s)
	SgSgRules *SyncSgSgRules `protobuf:"bytes,4,opt,name=sg_sg_rules,json=sgSgRules,proto3,oneof"`
}

type SyncReq_FqdnRules struct {
	// subject of FQDN rule(s)
	FqdnRules *SyncFqdnRules `protobuf:"bytes,5,opt,name=fqdn_rules,json=fqdnRules,proto3,oneof"`
}

type SyncReq_SgIcmpRules struct {
	// subject of SG:ICMP rule(s)
	SgIcmpRules *SyncSgIcmpRules `protobuf:"bytes,6,opt,name=sg_icmp_rules,json=sgIcmpRules,proto3,oneof"`
}

type SyncReq_SgSgIcmpRules struct {
	// subject of SG-SG:ICMP rule(s)
	SgSgIcmpRules *SyncSgSgIcmpRules `protobuf:"bytes,7,opt,name=sg_sg_icmp_rules,json=sgSgIcmpRules,proto3,oneof"`
}

type SyncReq_IeCidrSgRules struct {
	// subject of CIDR-SG-[INGERSS,EGRESS] rule(s)
	IeCidrSgRules *SyncIECidrSgRules `protobuf:"bytes,8,opt,name=ie_cidr_sg_rules,json=ieCidrSgRules,proto3,oneof"`
}

type SyncReq_IeSgSgRules struct {
	// subject of SG-SG-[INGERSS,EGRESS] rule(s)
	IeSgSgRules *SyncIESgSgRules `protobuf:"bytes,9,opt,name=ie_sg_sg_rules,json=ieSgSgRules,proto3,oneof"`
}

type SyncReq_IeSgSgIcmpRules struct {
	// subject of SG-SG-[INGRESS,EGRESS]:ICMP rule(s)
	IeSgSgIcmpRules *SyncIESgSgIcmpRules `protobuf:"bytes,10,opt,name=ie_sg_sg_icmp_rules,json=ieSgSgIcmpRules,proto3,oneof"`
}

type SyncReq_IeCidrSgIcmpRules struct {
	// subject of CIDR-SG-[INGRESS|EGRESS]:ICMP rule(s)
	IeCidrSgIcmpRules *SyncIECidrSgIcmpRules `protobuf:"bytes,11,opt,name=ie_cidr_sg_icmp_rules,json=ieCidrSgIcmpRules,proto3,oneof"`
}

func (*SyncReq_Groups) isSyncReq_Subject() {}

func (*SyncReq_Networks) isSyncReq_Subject() {}

func (*SyncReq_SgSgRules) isSyncReq_Subject() {}

func (*SyncReq_FqdnRules) isSyncReq_Subject() {}

func (*SyncReq_SgIcmpRules) isSyncReq_Subject() {}

func (*SyncReq_SgSgIcmpRules) isSyncReq_Subject() {}

func (*SyncReq_IeCidrSgRules) isSyncReq_Subject() {}

func (*SyncReq_IeSgSgRules) isSyncReq_Subject() {}

func (*SyncReq_IeSgSgIcmpRules) isSyncReq_Subject() {}

func (*SyncReq_IeCidrSgIcmpRules) isSyncReq_Subject() {}

// GetSgSubnetsReq: req to get Networks related to Security Group
type GetSgSubnetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// security group name
	SgName string `protobuf:"bytes,1,opt,name=sg_name,json=sgName,proto3" json:"sg_name,omitempty"`
}

func (x *GetSgSubnetsReq) Reset() {
	*x = GetSgSubnetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSgSubnetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSgSubnetsReq) ProtoMessage() {}

func (x *GetSgSubnetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSgSubnetsReq.ProtoReflect.Descriptor instead.
func (*GetSgSubnetsReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{28}
}

func (x *GetSgSubnetsReq) GetSgName() string {
	if x != nil {
		return x.SgName
	}
	return ""
}

// GetSgSubnetsResp: Networks related to Security Group resp
type GetSgSubnetsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network items
	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *GetSgSubnetsResp) Reset() {
	*x = GetSgSubnetsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSgSubnetsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSgSubnetsResp) ProtoMessage() {}

func (x *GetSgSubnetsResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSgSubnetsResp.ProtoReflect.Descriptor instead.
func (*GetSgSubnetsResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{29}
}

func (x *GetSgSubnetsResp) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

// GetSgSgRulesReq; req to get Rules scoped by SecGroup pair 'from' --> 'to'
type GetSgSgRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of security groups 'from'
	SgFrom string `protobuf:"bytes,1,opt,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	// name of security groups 'to'
	SgTo string `protobuf:"bytes,2,opt,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
}

func (x *GetSgSgRulesReq) Reset() {
	*x = GetSgSgRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSgSgRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSgSgRulesReq) ProtoMessage() {}

func (x *GetSgSgRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSgSgRulesReq.ProtoReflect.Descriptor instead.
func (*GetSgSgRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{30}
}

func (x *GetSgSgRulesReq) GetSgFrom() string {
	if x != nil {
		return x.SgFrom
	}
	return ""
}

func (x *GetSgSgRulesReq) GetSgTo() string {
	if x != nil {
		return x.SgTo
	}
	return ""
}

// FindSgSgRulesReq: req to find all SecGroup(s) Rule(s) scoped by variety('from') --> variety('to') SG(s)
type FindSgSgRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope GS name 'from' items
	SgFrom []string `protobuf:"bytes,1,rep,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	// scope  GS name 'to' items
	SgTo []string `protobuf:"bytes,2,rep,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
}

func (x *FindSgSgRulesReq) Reset() {
	*x = FindSgSgRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSgSgRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSgSgRulesReq) ProtoMessage() {}

func (x *FindSgSgRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSgSgRulesReq.ProtoReflect.Descriptor instead.
func (*FindSgSgRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{31}
}

func (x *FindSgSgRulesReq) GetSgFrom() []string {
	if x != nil {
		return x.SgFrom
	}
	return nil
}

func (x *FindSgSgRulesReq) GetSgTo() []string {
	if x != nil {
		return x.SgTo
	}
	return nil
}

// SgSgRulesResp: Security Group(s) Rule(s) resp
type SgSgRulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SG rule(s) items
	Rules []*SgSgRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SgSgRulesResp) Reset() {
	*x = SgSgRulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SgSgRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SgSgRulesResp) ProtoMessage() {}

func (x *SgSgRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SgSgRulesResp.ProtoReflect.Descriptor instead.
func (*SgSgRulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{32}
}

func (x *SgSgRulesResp) GetRules() []*SgSgRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// FindFqdnRulesReq: req to find all FQDN Rule(s) scoped by variety 'from' SG(s)
type FindFqdnRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope GS name 'from' items
	SgFrom []string `protobuf:"bytes,1,rep,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
}

func (x *FindFqdnRulesReq) Reset() {
	*x = FindFqdnRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFqdnRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFqdnRulesReq) ProtoMessage() {}

func (x *FindFqdnRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFqdnRulesReq.ProtoReflect.Descriptor instead.
func (*FindFqdnRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{33}
}

func (x *FindFqdnRulesReq) GetSgFrom() []string {
	if x != nil {
		return x.SgFrom
	}
	return nil
}

// FqdnRulesResp: FQDN Rule(s) resp
type FqdnRulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FQDN rule(s) items
	Rules []*FqdnRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *FqdnRulesResp) Reset() {
	*x = FqdnRulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FqdnRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FqdnRulesResp) ProtoMessage() {}

func (x *FqdnRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FqdnRulesResp.ProtoReflect.Descriptor instead.
func (*FqdnRulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{34}
}

func (x *FqdnRulesResp) GetRules() []*FqdnRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// FindSgIcmpRulesReq: req to find all SG:ICMP Rule(s) scoped by SG(s) variety
type FindSgIcmpRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope GS name item(s)
	SG []string `protobuf:"bytes,1,rep,name=SG,proto3" json:"SG,omitempty"`
}

func (x *FindSgIcmpRulesReq) Reset() {
	*x = FindSgIcmpRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSgIcmpRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSgIcmpRulesReq) ProtoMessage() {}

func (x *FindSgIcmpRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSgIcmpRulesReq.ProtoReflect.Descriptor instead.
func (*FindSgIcmpRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{35}
}

func (x *FindSgIcmpRulesReq) GetSG() []string {
	if x != nil {
		return x.SG
	}
	return nil
}

// FindSgIcmpRulesResp: SG:ICMP Rule(s) resp
type SgIcmpRulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SgIcmp rule item(s)
	Rules []*SgIcmpRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SgIcmpRulesResp) Reset() {
	*x = SgIcmpRulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SgIcmpRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SgIcmpRulesResp) ProtoMessage() {}

func (x *SgIcmpRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SgIcmpRulesResp.ProtoReflect.Descriptor instead.
func (*SgIcmpRulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{36}
}

func (x *SgIcmpRulesResp) GetRules() []*SgIcmpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// FindSgSgIcmpRulesReq: req to find all SG-SG:ICMP Rule(s) scoped by SG(s) variety
type FindSgSgIcmpRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope GS-from name item(s)
	SgFrom []string `protobuf:"bytes,1,rep,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	// scope GS-to name item(s)
	SgTo []string `protobuf:"bytes,2,rep,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
}

func (x *FindSgSgIcmpRulesReq) Reset() {
	*x = FindSgSgIcmpRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSgSgIcmpRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSgSgIcmpRulesReq) ProtoMessage() {}

func (x *FindSgSgIcmpRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSgSgIcmpRulesReq.ProtoReflect.Descriptor instead.
func (*FindSgSgIcmpRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{37}
}

func (x *FindSgSgIcmpRulesReq) GetSgFrom() []string {
	if x != nil {
		return x.SgFrom
	}
	return nil
}

func (x *FindSgSgIcmpRulesReq) GetSgTo() []string {
	if x != nil {
		return x.SgTo
	}
	return nil
}

// SgSgIcmpRulesResp: SG-SG:ICMP Rule(s) resp
type SgSgIcmpRulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SgSgIcmp rule item(s)
	Rules []*SgSgIcmpRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SgSgIcmpRulesResp) Reset() {
	*x = SgSgIcmpRulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SgSgIcmpRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SgSgIcmpRulesResp) ProtoMessage() {}

func (x *SgSgIcmpRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SgSgIcmpRulesResp.ProtoReflect.Descriptor instead.
func (*SgSgIcmpRulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{38}
}

func (x *SgSgIcmpRulesResp) GetRules() []*SgSgIcmpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// FindIECidrSgRulesReq: req to find all CIRD-SG-[INGRESS|EGRESS] Rule(s) scoped by SG(s) variety
type FindIECidrSgRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope GS name item(s)
	SG []string `protobuf:"bytes,1,rep,name=SG,proto3" json:"SG,omitempty"`
}

func (x *FindIECidrSgRulesReq) Reset() {
	*x = FindIECidrSgRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindIECidrSgRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindIECidrSgRulesReq) ProtoMessage() {}

func (x *FindIECidrSgRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindIECidrSgRulesReq.ProtoReflect.Descriptor instead.
func (*FindIECidrSgRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{39}
}

func (x *FindIECidrSgRulesReq) GetSG() []string {
	if x != nil {
		return x.SG
	}
	return nil
}

// СidrSgRulesResp: CIDR-SG-[INGRESS, EGRESS] rule(s) resp
type IECidrSgRulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// СidrSgRules rule item(s)
	Rules []*IECidrSgRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *IECidrSgRulesResp) Reset() {
	*x = IECidrSgRulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IECidrSgRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IECidrSgRulesResp) ProtoMessage() {}

func (x *IECidrSgRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IECidrSgRulesResp.ProtoReflect.Descriptor instead.
func (*IECidrSgRulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{40}
}

func (x *IECidrSgRulesResp) GetRules() []*IECidrSgRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// FindIESgSgRulesReq: req to find all SG-SG-[INGRESS|EGRESS] rule(s)
type FindIESgSgRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope Sg name item(s)
	SG []string `protobuf:"bytes,1,rep,name=SG,proto3" json:"SG,omitempty"`
	// scope SgLocal name item(s)
	SgLocal []string `protobuf:"bytes,2,rep,name=sg_local,json=sgLocal,proto3" json:"sg_local,omitempty"`
}

func (x *FindIESgSgRulesReq) Reset() {
	*x = FindIESgSgRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindIESgSgRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindIESgSgRulesReq) ProtoMessage() {}

func (x *FindIESgSgRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindIESgSgRulesReq.ProtoReflect.Descriptor instead.
func (*FindIESgSgRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{41}
}

func (x *FindIESgSgRulesReq) GetSG() []string {
	if x != nil {
		return x.SG
	}
	return nil
}

func (x *FindIESgSgRulesReq) GetSgLocal() []string {
	if x != nil {
		return x.SgLocal
	}
	return nil
}

// IESgSgRulesResp: SG-SG-[INGRESS, EGRESS] rule(s) resp
type IESgSgRulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IESgSgRule rule item(s)
	Rules []*IESgSgRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *IESgSgRulesResp) Reset() {
	*x = IESgSgRulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IESgSgRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IESgSgRulesResp) ProtoMessage() {}

func (x *IESgSgRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IESgSgRulesResp.ProtoReflect.Descriptor instead.
func (*IESgSgRulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{42}
}

func (x *IESgSgRulesResp) GetRules() []*IESgSgRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// FindIESgSgIcmpRulesReq: req to find all SG-SG-[INGRESS|EGRESS]:ICMP rule(s)
type FindIESgSgIcmpRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope Sg name item(s)
	SG []string `protobuf:"bytes,1,rep,name=SG,proto3" json:"SG,omitempty"`
	// scope SgLocal name item(s)
	SgLocal []string `protobuf:"bytes,2,rep,name=sg_local,json=sgLocal,proto3" json:"sg_local,omitempty"`
}

func (x *FindIESgSgIcmpRulesReq) Reset() {
	*x = FindIESgSgIcmpRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindIESgSgIcmpRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindIESgSgIcmpRulesReq) ProtoMessage() {}

func (x *FindIESgSgIcmpRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindIESgSgIcmpRulesReq.ProtoReflect.Descriptor instead.
func (*FindIESgSgIcmpRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{43}
}

func (x *FindIESgSgIcmpRulesReq) GetSG() []string {
	if x != nil {
		return x.SG
	}
	return nil
}

func (x *FindIESgSgIcmpRulesReq) GetSgLocal() []string {
	if x != nil {
		return x.SgLocal
	}
	return nil
}

// IESgSgIcmpRulesResp: SG-SG-[INGRESS|EGRESS]:ICMP rule(s) resp
type IESgSgIcmpRulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IESgSgRule rule item(s)
	Rules []*IESgSgIcmpRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *IESgSgIcmpRulesResp) Reset() {
	*x = IESgSgIcmpRulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IESgSgIcmpRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IESgSgIcmpRulesResp) ProtoMessage() {}

func (x *IESgSgIcmpRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IESgSgIcmpRulesResp.ProtoReflect.Descriptor instead.
func (*IESgSgIcmpRulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{44}
}

func (x *IESgSgIcmpRulesResp) GetRules() []*IESgSgIcmpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// FindIECidrSgIcmpRulesReq: req to find all CIDR-SG-[INGRESS|EGRESS]:ICMP rules(s) scoped by SG(s) variety
type FindIECidrSgIcmpRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope SG name item(s)
	SG []string `protobuf:"bytes,1,rep,name=SG,proto3" json:"SG,omitempty"`
}

func (x *FindIECidrSgIcmpRulesReq) Reset() {
	*x = FindIECidrSgIcmpRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindIECidrSgIcmpRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindIECidrSgIcmpRulesReq) ProtoMessage() {}

func (x *FindIECidrSgIcmpRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindIECidrSgIcmpRulesReq.ProtoReflect.Descriptor instead.
func (*FindIECidrSgIcmpRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{45}
}

func (x *FindIECidrSgIcmpRulesReq) GetSG() []string {
	if x != nil {
		return x.SG
	}
	return nil
}

// IECidrSgIcmpRulesResp: CIDR-SG-[INGRESS|EGRESS]:ICMP rules(s) resp
type IECidrSgIcmpRulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IECidrSgIcmpRule rule item(s)
	Rules []*IECidrSgIcmpRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *IECidrSgIcmpRulesResp) Reset() {
	*x = IECidrSgIcmpRulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IECidrSgIcmpRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IECidrSgIcmpRulesResp) ProtoMessage() {}

func (x *IECidrSgIcmpRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IECidrSgIcmpRulesResp.ProtoReflect.Descriptor instead.
func (*IECidrSgIcmpRulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{46}
}

func (x *IECidrSgIcmpRulesResp) GetRules() []*IECidrSgIcmpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// GetSecGroupForAddressReq: req to get Security Group by IP or CIDR
type GetSecGroupForAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an IP or CIDR
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetSecGroupForAddressReq) Reset() {
	*x = GetSecGroupForAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecGroupForAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecGroupForAddressReq) ProtoMessage() {}

func (x *GetSecGroupForAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecGroupForAddressReq.ProtoReflect.Descriptor instead.
func (*GetSecGroupForAddressReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{47}
}

func (x *GetSecGroupForAddressReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

var File_sgroups_api_proto protoreflect.FileDescriptor

var file_sgroups_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x70, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49,
	0x50, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a,
	0x07, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x32, 0x0a,
	0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10,
	0x02, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x26, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x64, 0x22, 0x2d, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x6f, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x08, 0x53, 0x67, 0x53, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x67, 0x54,
	0x6f, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76,
	0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x3a, 0x21, 0x92, 0x41, 0x1e, 0x0a, 0x1c, 0xd2, 0x01, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d,
	0xd2, 0x01, 0x04, 0x73, 0x67, 0x54, 0x6f, 0xd2, 0x01, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0xc9, 0x02, 0x0a, 0x08, 0x46, 0x71, 0x64, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x51, 0x44,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x12, 0x3e, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x21, 0x92, 0x41,
	0x1e, 0x0a, 0x1c, 0xd2, 0x01, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0xd2, 0x01, 0x04, 0x46,
	0x51, 0x44, 0x4e, 0xd2, 0x01, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x9b, 0x01, 0x0a, 0x0a, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x53, 0x47, 0x12, 0x20,
	0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x04, 0x49, 0x43, 0x4d, 0x50,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x01,
	0x0a, 0x0c, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x67, 0x54, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x67, 0x54, 0x6f, 0x12, 0x20, 0x0a, 0x04, 0x49, 0x43,
	0x4d, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x43, 0x4d, 0x50, 0x52, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62,
	0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0x8b, 0x03, 0x0a, 0x0c, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x49, 0x44, 0x52, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x47, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x53, 0x47, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x62,
	0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0xd2, 0x01,
	0x04, 0x43, 0x49, 0x44, 0x52, 0xd2, 0x01, 0x02, 0x53, 0x47, 0xd2, 0x01, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0xd2, 0x01, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x22, 0xc1, 0x02, 0x0a, 0x10, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x49, 0x63, 0x6d,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x49, 0x44, 0x52, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x47, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x53, 0x47, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x43, 0x4d, 0x50,
	0x52, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x26, 0x92, 0x41,
	0x23, 0x0a, 0x21, 0xd2, 0x01, 0x04, 0x43, 0x49, 0x44, 0x52, 0xd2, 0x01, 0x02, 0x53, 0x47, 0xd2,
	0x01, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0xd2, 0x01, 0x08, 0x49, 0x43, 0x4d, 0x50,
	0x2e, 0x49, 0x50, 0x76, 0x22, 0x93, 0x03, 0x0a, 0x0a, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x47, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x53, 0x47, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x29,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32,
	0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x2a,
	0x92, 0x41, 0x27, 0x0a, 0x25, 0xd2, 0x01, 0x02, 0x53, 0x47, 0xd2, 0x01, 0x07, 0x73, 0x67, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0xd2, 0x01, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0xd2, 0x01, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x49,
	0x45, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x53, 0x47, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x43, 0x4d, 0x50, 0x52,
	0x04, 0x49, 0x43, 0x4d, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x29, 0x92, 0x41, 0x26,
	0x0a, 0x24, 0xd2, 0x01, 0x02, 0x53, 0x47, 0xd2, 0x01, 0x07, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0xd2, 0x01, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0xd2, 0x01, 0x08, 0x49, 0x43,
	0x4d, 0x50, 0x2e, 0x49, 0x50, 0x76, 0x22, 0x4b, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x3e, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x67, 0x53, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x71, 0x64, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x46, 0x71, 0x64, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x76,
	0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x42, 0x0a, 0x0c, 0x53, 0x79,
	0x6e, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x42,
	0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63,
	0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x79,
	0x6e, 0x63, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x49,
	0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x42, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x45,
	0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x49, 0x45, 0x53,
	0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x4e, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72,
	0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x62, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x49, 0x45, 0x43, 0x69, 0x64,
	0x72, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x36, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32,
	0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x22, 0x32, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0xd8, 0x06, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x52, 0x06, 0x73,
	0x79, 0x6e, 0x63, 0x4f, 0x70, 0x12, 0x3b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x48, 0x00, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x3e, 0x0a,
	0x0b, 0x73, 0x67, 0x5f, 0x73, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0a, 0x66, 0x71, 0x64, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x71, 0x64, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x71, 0x64, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0d,
	0x73, 0x67, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x67, 0x5f, 0x73, 0x67, 0x5f, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x10, 0x69, 0x65, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x73, 0x67, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x62, 0x2e, 0x76,
	0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x45,
	0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x69,
	0x65, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e,
	0x69, 0x65, 0x5f, 0x73, 0x67, 0x5f, 0x73, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x65, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x69, 0x65, 0x5f, 0x73, 0x67, 0x5f, 0x73, 0x67, 0x5f,
	0x69, 0x63, 0x6d, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x65, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63,
	0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x69, 0x65, 0x5f, 0x63, 0x69,
	0x64, 0x72, 0x5f, 0x73, 0x67, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x45, 0x43, 0x69, 0x64,
	0x72, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x65, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x3e, 0x0a, 0x06, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x4f, 0x70, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x06, 0x22, 0x04, 0x08, 0x01, 0x10,
	0x03, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2,
	0x01, 0x06, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x22, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x67, 0x54,
	0x6f, 0x3a, 0x15, 0x92, 0x41, 0x12, 0x0a, 0x10, 0xd2, 0x01, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f,
	0x6d, 0xd2, 0x01, 0x04, 0x73, 0x67, 0x54, 0x6f, 0x22, 0x57, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x67, 0x54, 0x6f, 0x3a, 0x15, 0x92, 0x41, 0x12, 0x0a,
	0x10, 0xd2, 0x01, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0xd2, 0x01, 0x04, 0x73, 0x67, 0x54,
	0x6f, 0x22, 0x3e, 0x0a, 0x0d, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x3b, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x71, 0x64, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x0e,
	0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x3e,
	0x0a, 0x0d, 0x46, 0x71, 0x64, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2d, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46,
	0x71, 0x64, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x30,
	0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x47, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x02, 0x53, 0x47, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x53, 0x47,
	0x22, 0x42, 0x0a, 0x0f, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67, 0x53, 0x67,
	0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x67, 0x54, 0x6f, 0x3a, 0x15, 0x92, 0x41, 0x12, 0x0a,
	0x10, 0xd2, 0x01, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0xd2, 0x01, 0x04, 0x73, 0x67, 0x54,
	0x6f, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x6e,
	0x64, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x47, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x53,
	0x47, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x53, 0x47, 0x22, 0x46, 0x0a,
	0x11, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x45, 0x53,
	0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x53,
	0x47, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x53, 0x47, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2, 0x01, 0x02,
	0x53, 0x47, 0xd2, 0x01, 0x07, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x42, 0x0a, 0x0f,
	0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x49,
	0x45, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0x59, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63,
	0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x47,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x53, 0x47, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x67,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2, 0x01, 0x02, 0x53,
	0x47, 0xd2, 0x01, 0x07, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x13, 0x49,
	0x45, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x49,
	0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x47, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x53, 0x47, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x53, 0x47, 0x22,
	0x4e, 0x0a, 0x15, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e,
	0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67,
	0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x45, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x2d, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x10, 0x02, 0x32, 0x87, 0x15, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x04, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x16, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x31, 0x92, 0x41, 0x1b, 0x1a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x3a, 0x20, 0x6d, 0x61,
	0x6b, 0x65, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x44,
	0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x12, 0x91, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x77, 0x62,
	0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x92, 0x41, 0x32, 0x1a,
	0x30, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74,
	0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x44, 0x42, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x79, 0x6e,
	0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1d, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x44, 0x92, 0x41, 0x25, 0x1a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x24, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32,
	0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x59, 0x92, 0x41, 0x33, 0x1a, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a,
	0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x77, 0x62,
	0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x62,
	0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x92, 0x41,
	0x2b, 0x1a, 0x29, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x3a,
	0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x47, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x67, 0x2f, 0x7b, 0x73, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0xb8, 0x01, 0x0a,
	0x0d, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1f,
	0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x68, 0x92,
	0x41, 0x4b, 0x1a, 0x49, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x53, 0x47, 0x2d, 0x53, 0x47, 0x20, 0x52,
	0x75, 0x6c, 0x65, 0x28, 0x73, 0x29, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73, 0x20, 0x27,
	0x53, 0x47, 0x20, 0x27, 0x2d, 0x3e, 0x27, 0x74, 0x6f, 0x20, 0x53, 0x47, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x67, 0x2d, 0x73,
	0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x71, 0x64, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x77, 0x62, 0x2e, 0x76,
	0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x71,
	0x64, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x77, 0x62, 0x2e,
	0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x71, 0x64, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5b, 0x92, 0x41, 0x3f, 0x1a, 0x3d, 0x46,
	0x69, 0x6e, 0x64, 0x46, 0x71, 0x67, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x66, 0x69,
	0x6e, 0x64, 0x73, 0x20, 0x46, 0x51, 0x44, 0x4e, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x28, 0x73, 0x29,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x20, 0x53, 0x47, 0x20, 0x27, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x71, 0x64, 0x6e, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67,
	0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x77, 0x62, 0x2e, 0x76,
	0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67,
	0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x77,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x67, 0x49,
	0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5c, 0x92, 0x41,
	0x3d, 0x1a, 0x3b, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x53, 0x47, 0x3a, 0x49, 0x43, 0x4d,
	0x50, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x28, 0x73, 0x29, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x53, 0x47, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x67, 0x2d,
	0x69, 0x63, 0x6d, 0x70, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x11, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x23, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6d, 0x92, 0x41, 0x4b, 0x1a, 0x49, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a,
	0x20, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x53, 0x47, 0x2d, 0x53, 0x47, 0x3a, 0x49, 0x43, 0x4d,
	0x50, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x28, 0x73, 0x29, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x53, 0x47, 0x3c, 0x46,
	0x52, 0x4f, 0x4d, 0x2d, 0x54, 0x4f, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a,
	0x22, 0x14, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x67, 0x2d, 0x73, 0x67, 0x2d, 0x69, 0x63, 0x6d, 0x70,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x49,
	0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x77,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x72, 0x92, 0x41, 0x50, 0x1a, 0x4e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x45,
	0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x66, 0x69, 0x6e,
	0x64, 0x73, 0x20, 0x43, 0x49, 0x44, 0x52, 0x2d, 0x53, 0x47, 0x2d, 0x5b, 0x49, 0x4e, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x2b, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5d, 0x20, 0x72, 0x75, 0x6c, 0x65,
	0x28, 0x73, 0x29, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x53, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x65, 0x2d, 0x63, 0x69, 0x64, 0x72, 0x2d, 0x73,
	0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64,
	0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x77, 0x62,
	0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x49,
	0x45, 0x53, 0x67, 0x53, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x76,
	0x92, 0x41, 0x56, 0x1a, 0x54, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x53, 0x47, 0x2d, 0x53,
	0x47, 0x2d, 0x5b, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x2b, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5d, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x28, 0x73, 0x29, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x53, 0x47, 0x2d,
	0x3c, 0x46, 0x52, 0x4f, 0x4d, 0x7c, 0x54, 0x4f, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x65, 0x2d, 0x73, 0x67, 0x2d, 0x73, 0x67,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xe5, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x49,
	0x45, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x25,
	0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x49, 0x45, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x82, 0x01, 0x92, 0x41, 0x5d, 0x1a,
	0x5b, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x67, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x53, 0x47, 0x2d, 0x53, 0x47, 0x2d,
	0x5b, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x2b, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5d,
	0x3a, 0x49, 0x43, 0x4d, 0x50, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x28, 0x73, 0x29, 0x20, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20,
	0x53, 0x47, 0x2d, 0x3c, 0x46, 0x52, 0x4f, 0x4d, 0x7c, 0x54, 0x4f, 0x3e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x65, 0x2d, 0x73, 0x67,
	0x2d, 0x73, 0x67, 0x2d, 0x69, 0x63, 0x6d, 0x70, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xe9,
	0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x49,
	0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32,
	0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x45, 0x43,
	0x69, 0x64, 0x72, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x80, 0x01, 0x92, 0x41, 0x59, 0x1a, 0x57, 0x46,
	0x69, 0x6e, 0x64, 0x49, 0x45, 0x43, 0x69, 0x64, 0x72, 0x53, 0x67, 0x49, 0x63, 0x6d, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x43, 0x49, 0x44, 0x52,
	0x2d, 0x53, 0x47, 0x2d, 0x5b, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x7c, 0x45, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5d, 0x3a, 0x49, 0x43, 0x4d, 0x50, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x28, 0x73,
	0x29, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x20, 0x53, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22,
	0x19, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x65, 0x2d, 0x63, 0x69, 0x64, 0x72, 0x2d, 0x73, 0x67, 0x2d,
	0x69, 0x63, 0x6d, 0x70, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x77, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x55, 0x92, 0x41, 0x3a, 0x1a, 0x38, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x79, 0x20, 0x49, 0x50, 0x20, 0x6f, 0x72,
	0x20, 0x43, 0x49, 0x44, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32,
	0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x73, 0x67, 0x1a, 0x20, 0x92,
	0x41, 0x1d, 0x12, 0x1b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x89, 0x01, 0x92, 0x41, 0x46, 0x12, 0x1d, 0x0a, 0x16, 0x57, 0x42, 0x20, 0x48, 0x6f, 0x73, 0x74,
	0x20, 0x42, 0x61, 0x73, 0x65, 0x64, 0x20, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x32,
	0x03, 0x32, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x3e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x6c, 0x64, 0x62, 0x65, 0x72, 0x72,
	0x69, 0x65, 0x73, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x3b, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sgroups_api_proto_rawDescOnce sync.Once
	file_sgroups_api_proto_rawDescData = file_sgroups_api_proto_rawDesc
)

func file_sgroups_api_proto_rawDescGZIP() []byte {
	file_sgroups_api_proto_rawDescOnce.Do(func() {
		file_sgroups_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_sgroups_api_proto_rawDescData)
	})
	return file_sgroups_api_proto_rawDescData
}

var file_sgroups_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sgroups_api_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_sgroups_api_proto_goTypes = []any{
	(RuleAction)(0),                      // 0: wb.v2.sgroups.RuleAction
	(SecGroup_DefaultAction)(0),          // 1: wb.v2.sgroups.SecGroup.DefaultAction
	(SyncReq_SyncOp)(0),                  // 2: wb.v2.sgroups.SyncReq.SyncOp
	(*Network)(nil),                      // 3: wb.v2.sgroups.Network
	(*SecGroup)(nil),                     // 4: wb.v2.sgroups.SecGroup
	(*AccPorts)(nil),                     // 5: wb.v2.sgroups.AccPorts
	(*RulePriority)(nil),                 // 6: wb.v2.sgroups.RulePriority
	(*SgSgRule)(nil),                     // 7: wb.v2.sgroups.SgSgRule
	(*FqdnRule)(nil),                     // 8: wb.v2.sgroups.FqdnRule
	(*SgIcmpRule)(nil),                   // 9: wb.v2.sgroups.SgIcmpRule
	(*SgSgIcmpRule)(nil),                 // 10: wb.v2.sgroups.SgSgIcmpRule
	(*IECidrSgRule)(nil),                 // 11: wb.v2.sgroups.IECidrSgRule
	(*IECidrSgIcmpRule)(nil),             // 12: wb.v2.sgroups.IECidrSgIcmpRule
	(*IESgSgRule)(nil),                   // 13: wb.v2.sgroups.IESgSgRule
	(*IESgSgIcmpRule)(nil),               // 14: wb.v2.sgroups.IESgSgIcmpRule
	(*SyncStatusResp)(nil),               // 15: wb.v2.sgroups.SyncStatusResp
	(*SyncSgSgRules)(nil),                // 16: wb.v2.sgroups.SyncSgSgRules
	(*SyncFqdnRules)(nil),                // 17: wb.v2.sgroups.SyncFqdnRules
	(*SyncSecurityGroups)(nil),           // 18: wb.v2.sgroups.SyncSecurityGroups
	(*SyncNetworks)(nil),                 // 19: wb.v2.sgroups.SyncNetworks
	(*SyncSgIcmpRules)(nil),              // 20: wb.v2.sgroups.SyncSgIcmpRules
	(*SyncSgSgIcmpRules)(nil),            // 21: wb.v2.sgroups.SyncSgSgIcmpRules
	(*SyncIECidrSgRules)(nil),            // 22: wb.v2.sgroups.SyncIECidrSgRules
	(*SyncIESgSgRules)(nil),              // 23: wb.v2.sgroups.SyncIESgSgRules
	(*SyncIESgSgIcmpRules)(nil),          // 24: wb.v2.sgroups.SyncIESgSgIcmpRules
	(*SyncIECidrSgIcmpRules)(nil),        // 25: wb.v2.sgroups.SyncIECidrSgIcmpRules
	(*ListNetworksReq)(nil),              // 26: wb.v2.sgroups.ListNetworksReq
	(*ListNetworksResp)(nil),             // 27: wb.v2.sgroups.ListNetworksResp
	(*ListSecurityGroupsReq)(nil),        // 28: wb.v2.sgroups.ListSecurityGroupsReq
	(*ListSecurityGroupsResp)(nil),       // 29: wb.v2.sgroups.ListSecurityGroupsResp
	(*SyncReq)(nil),                      // 30: wb.v2.sgroups.SyncReq
	(*GetSgSubnetsReq)(nil),              // 31: wb.v2.sgroups.GetSgSubnetsReq
	(*GetSgSubnetsResp)(nil),             // 32: wb.v2.sgroups.GetSgSubnetsResp
	(*GetSgSgRulesReq)(nil),              // 33: wb.v2.sgroups.GetSgSgRulesReq
	(*FindSgSgRulesReq)(nil),             // 34: wb.v2.sgroups.FindSgSgRulesReq
	(*SgSgRulesResp)(nil),                // 35: wb.v2.sgroups.SgSgRulesResp
	(*FindFqdnRulesReq)(nil),             // 36: wb.v2.sgroups.FindFqdnRulesReq
	(*FqdnRulesResp)(nil),                // 37: wb.v2.sgroups.FqdnRulesResp
	(*FindSgIcmpRulesReq)(nil),           // 38: wb.v2.sgroups.FindSgIcmpRulesReq
	(*SgIcmpRulesResp)(nil),              // 39: wb.v2.sgroups.SgIcmpRulesResp
	(*FindSgSgIcmpRulesReq)(nil),         // 40: wb.v2.sgroups.FindSgSgIcmpRulesReq
	(*SgSgIcmpRulesResp)(nil),            // 41: wb.v2.sgroups.SgSgIcmpRulesResp
	(*FindIECidrSgRulesReq)(nil),         // 42: wb.v2.sgroups.FindIECidrSgRulesReq
	(*IECidrSgRulesResp)(nil),            // 43: wb.v2.sgroups.IECidrSgRulesResp
	(*FindIESgSgRulesReq)(nil),           // 44: wb.v2.sgroups.FindIESgSgRulesReq
	(*IESgSgRulesResp)(nil),              // 45: wb.v2.sgroups.IESgSgRulesResp
	(*FindIESgSgIcmpRulesReq)(nil),       // 46: wb.v2.sgroups.FindIESgSgIcmpRulesReq
	(*IESgSgIcmpRulesResp)(nil),          // 47: wb.v2.sgroups.IESgSgIcmpRulesResp
	(*FindIECidrSgIcmpRulesReq)(nil),     // 48: wb.v2.sgroups.FindIECidrSgIcmpRulesReq
	(*IECidrSgIcmpRulesResp)(nil),        // 49: wb.v2.sgroups.IECidrSgIcmpRulesResp
	(*GetSecGroupForAddressReq)(nil),     // 50: wb.v2.sgroups.GetSecGroupForAddressReq
	(*common.Networks_NetIP)(nil),        // 51: common.Networks.NetIP
	(common.Networks_NetIP_Transport)(0), // 52: common.Networks.NetIP.Transport
	(*common.ICMP)(nil),                  // 53: common.ICMP
	(common.Traffic)(0),                  // 54: common.Traffic
	(*timestamppb.Timestamp)(nil),        // 55: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                // 56: google.protobuf.Empty
}
var file_sgroups_api_proto_depIdxs = []int32{
	51, // 0: wb.v2.sgroups.Network.network:type_name -> common.Networks.NetIP
	1,  // 1: wb.v2.sgroups.SecGroup.default_action:type_name -> wb.v2.sgroups.SecGroup.DefaultAction
	52, // 2: wb.v2.sgroups.SgSgRule.transport:type_name -> common.Networks.NetIP.Transport
	5,  // 3: wb.v2.sgroups.SgSgRule.ports:type_name -> wb.v2.sgroups.AccPorts
	0,  // 4: wb.v2.sgroups.SgSgRule.action:type_name -> wb.v2.sgroups.RuleAction
	6,  // 5: wb.v2.sgroups.SgSgRule.priority:type_name -> wb.v2.sgroups.RulePriority
	52, // 6: wb.v2.sgroups.FqdnRule.transport:type_name -> common.Networks.NetIP.Transport
	5,  // 7: wb.v2.sgroups.FqdnRule.ports:type_name -> wb.v2.sgroups.AccPorts
	0,  // 8: wb.v2.sgroups.FqdnRule.action:type_name -> wb.v2.sgroups.RuleAction
	6,  // 9: wb.v2.sgroups.FqdnRule.priority:type_name -> wb.v2.sgroups.RulePriority
	53, // 10: wb.v2.sgroups.SgIcmpRule.ICMP:type_name -> common.ICMP
	0,  // 11: wb.v2.sgroups.SgIcmpRule.action:type_name -> wb.v2.sgroups.RuleAction
	53, // 12: wb.v2.sgroups.SgSgIcmpRule.ICMP:type_name -> common.ICMP
	0,  // 13: wb.v2.sgroups.SgSgIcmpRule.action:type_name -> wb.v2.sgroups.RuleAction
	6,  // 14: wb.v2.sgroups.SgSgIcmpRule.priority:type_name -> wb.v2.sgroups.RulePriority
	52, // 15: wb.v2.sgroups.IECidrSgRule.transport:type_name -> common.Networks.NetIP.Transport
	54, // 16: wb.v2.sgroups.IECidrSgRule.traffic:type_name -> common.Traffic
	5,  // 17: wb.v2.sgroups.IECidrSgRule.ports:type_name -> wb.v2.sgroups.AccPorts
	0,  // 18: wb.v2.sgroups.IECidrSgRule.action:type_name -> wb.v2.sgroups.RuleAction
	6,  // 19: wb.v2.sgroups.IECidrSgRule.priority:type_name -> wb.v2.sgroups.RulePriority
	54, // 20: wb.v2.sgroups.IECidrSgIcmpRule.traffic:type_name -> common.Traffic
	53, // 21: wb.v2.sgroups.IECidrSgIcmpRule.ICMP:type_name -> common.ICMP
	0,  // 22: wb.v2.sgroups.IECidrSgIcmpRule.action:type_name -> wb.v2.sgroups.RuleAction
	6,  // 23: wb.v2.sgroups.IECidrSgIcmpRule.priority:type_name -> wb.v2.sgroups.RulePriority
	52, // 24: wb.v2.sgroups.IESgSgRule.transport:type_name -> common.Networks.NetIP.Transport
	54, // 25: wb.v2.sgroups.IESgSgRule.traffic:type_name -> common.Traffic
	5,  // 26: wb.v2.sgroups.IESgSgRule.ports:type_name -> wb.v2.sgroups.AccPorts
	0,  // 27: wb.v2.sgroups.IESgSgRule.action:type_name -> wb.v2.sgroups.RuleAction
	6,  // 28: wb.v2.sgroups.IESgSgRule.priority:type_name -> wb.v2.sgroups.RulePriority
	54, // 29: wb.v2.sgroups.IESgSgIcmpRule.traffic:type_name -> common.Traffic
	53, // 30: wb.v2.sgroups.IESgSgIcmpRule.ICMP:type_name -> common.ICMP
	0,  // 31: wb.v2.sgroups.IESgSgIcmpRule.action:type_name -> wb.v2.sgroups.RuleAction
	6,  // 32: wb.v2.sgroups.IESgSgIcmpRule.priority:type_name -> wb.v2.sgroups.RulePriority
	55, // 33: wb.v2.sgroups.SyncStatusResp.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 34: wb.v2.sgroups.SyncSgSgRules.rules:type_name -> wb.v2.sgroups.SgSgRule
	8,  // 35: wb.v2.sgroups.SyncFqdnRules.rules:type_name -> wb.v2.sgroups.FqdnRule
	4,  // 36: wb.v2.sgroups.SyncSecurityGroups.groups:type_name -> wb.v2.sgroups.SecGroup
	3,  // 37: wb.v2.sgroups.SyncNetworks.networks:type_name -> wb.v2.sgroups.Network
	9,  // 38: wb.v2.sgroups.SyncSgIcmpRules.rules:type_name -> wb.v2.sgroups.SgIcmpRule
	10, // 39: wb.v2.sgroups.SyncSgSgIcmpRules.rules:type_name -> wb.v2.sgroups.SgSgIcmpRule
	11, // 40: wb.v2.sgroups.SyncIECidrSgRules.rules:type_name -> wb.v2.sgroups.IECidrSgRule
	13, // 41: wb.v2.sgroups.SyncIESgSgRules.rules:type_name -> wb.v2.sgroups.IESgSgRule
	14, // 42: wb.v2.sgroups.SyncIESgSgIcmpRules.rules:type_name -> wb.v2.sgroups.IESgSgIcmpRule
	12, // 43: wb.v2.sgroups.SyncIECidrSgIcmpRules.rules:type_name -> wb.v2.sgroups.IECidrSgIcmpRule
	3,  // 44: wb.v2.sgroups.ListNetworksResp.networks:type_name -> wb.v2.sgroups.Network
	4,  // 45: wb.v2.sgroups.ListSecurityGroupsResp.groups:type_name -> wb.v2.sgroups.SecGroup
	2,  // 46: wb.v2.sgroups.SyncReq.sync_op:type_name -> wb.v2.sgroups.SyncReq.SyncOp
	18, // 47: wb.v2.sgroups.SyncReq.groups:type_name -> wb.v2.sgroups.SyncSecurityGroups
	19, // 48: wb.v2.sgroups.SyncReq.networks:type_name -> wb.v2.sgroups.SyncNetworks
	16, // 49: wb.v2.sgroups.SyncReq.sg_sg_rules:type_name -> wb.v2.sgroups.SyncSgSgRules
	17, // 50: wb.v2.sgroups.SyncReq.fqdn_rules:type_name -> wb.v2.sgroups.SyncFqdnRules
	20, // 51: wb.v2.sgroups.SyncReq.sg_icmp_rules:type_name -> wb.v2.sgroups.SyncSgIcmpRules
	21, // 52: wb.v2.sgroups.SyncReq.sg_sg_icmp_rules:type_name -> wb.v2.sgroups.SyncSgSgIcmpRules
	22, // 53: wb.v2.sgroups.SyncReq.ie_cidr_sg_rules:type_name -> wb.v2.sgroups.SyncIECidrSgRules
	23, // 54: wb.v2.sgroups.SyncReq.ie_sg_sg_rules:type_name -> wb.v2.sgroups.SyncIESgSgRules
	24, // 55: wb.v2.sgroups.SyncReq.ie_sg_sg_icmp_rules:type_name -> wb.v2.sgroups.SyncIESgSgIcmpRules
	25, // 56: wb.v2.sgroups.SyncReq.ie_cidr_sg_icmp_rules:type_name -> wb.v2.sgroups.SyncIECidrSgIcmpRules
	3,  // 57: wb.v2.sgroups.GetSgSubnetsResp.networks:type_name -> wb.v2.sgroups.Network
	7,  // 58: wb.v2.sgroups.SgSgRulesResp.rules:type_name -> wb.v2.sgroups.SgSgRule
	8,  // 59: wb.v2.sgroups.FqdnRulesResp.rules:type_name -> wb.v2.sgroups.FqdnRule
	9,  // 60: wb.v2.sgroups.SgIcmpRulesResp.rules:type_name -> wb.v2.sgroups.SgIcmpRule
	10, // 61: wb.v2.sgroups.SgSgIcmpRulesResp.rules:type_name -> wb.v2.sgroups.SgSgIcmpRule
	11, // 62: wb.v2.sgroups.IECidrSgRulesResp.rules:type_name -> wb.v2.sgroups.IECidrSgRule
	13, // 63: wb.v2.sgroups.IESgSgRulesResp.rules:type_name -> wb.v2.sgroups.IESgSgRule
	14, // 64: wb.v2.sgroups.IESgSgIcmpRulesResp.rules:type_name -> wb.v2.sgroups.IESgSgIcmpRule
	12, // 65: wb.v2.sgroups.IECidrSgIcmpRulesResp.rules:type_name -> wb.v2.sgroups.IECidrSgIcmpRule
	30, // 66: wb.v2.sgroups.SecGroupService.Sync:input_type -> wb.v2.sgroups.SyncReq
	56, // 67: wb.v2.sgroups.SecGroupService.SyncStatus:input_type -> google.protobuf.Empty
	56, // 68: wb.v2.sgroups.SecGroupService.SyncStatuses:input_type -> google.protobuf.Empty
	26, // 69: wb.v2.sgroups.SecGroupService.ListNetworks:input_type -> wb.v2.sgroups.ListNetworksReq
	28, // 70: wb.v2.sgroups.SecGroupService.ListSecurityGroups:input_type -> wb.v2.sgroups.ListSecurityGroupsReq
	31, // 71: wb.v2.sgroups.SecGroupService.GetSgSubnets:input_type -> wb.v2.sgroups.GetSgSubnetsReq
	34, // 72: wb.v2.sgroups.SecGroupService.FindSgSgRules:input_type -> wb.v2.sgroups.FindSgSgRulesReq
	36, // 73: wb.v2.sgroups.SecGroupService.FindFqdnRules:input_type -> wb.v2.sgroups.FindFqdnRulesReq
	38, // 74: wb.v2.sgroups.SecGroupService.FindSgIcmpRules:input_type -> wb.v2.sgroups.FindSgIcmpRulesReq
	40, // 75: wb.v2.sgroups.SecGroupService.FindSgSgIcmpRules:input_type -> wb.v2.sgroups.FindSgSgIcmpRulesReq
	42, // 76: wb.v2.sgroups.SecGroupService.FindIECidrSgRules:input_type -> wb.v2.sgroups.FindIECidrSgRulesReq
	44, // 77: wb.v2.sgroups.SecGroupService.FindIESgSgRules:input_type -> wb.v2.sgroups.FindIESgSgRulesReq
	46, // 78: wb.v2.sgroups.SecGroupService.FindIESgSgIcmpRules:input_type -> wb.v2.sgroups.FindIESgSgIcmpRulesReq
	48, // 79: wb.v2.sgroups.SecGroupService.FindIECidrSgIcmpRules:input_type -> wb.v2.sgroups.FindIECidrSgIcmpRulesReq
	50, // 80: wb.v2.sgroups.SecGroupService.GetSecGroupForAddress:input_type -> wb.v2.sgroups.GetSecGroupForAddressReq
	56, // 81: wb.v2.sgroups.SecGroupService.Sync:output_type -> google.protobuf.Empty
	15, // 82: wb.v2.sgroups.SecGroupService.SyncStatus:output_type -> wb.v2.sgroups.SyncStatusResp
	15, // 83: wb.v2.sgroups.SecGroupService.SyncStatuses:output_type -> wb.v2.sgroups.SyncStatusResp
	27, // 84: wb.v2.sgroups.SecGroupService.ListNetworks:output_type -> wb.v2.sgroups.ListNetworksResp
	29, // 85: wb.v2.sgroups.SecGroupService.ListSecurityGroups:output_type -> wb.v2.sgroups.ListSecurityGroupsResp
	32, // 86: wb.v2.sgroups.SecGroupService.GetSgSubnets:output_type -> wb.v2.sgroups.GetSgSubnetsResp
	35, // 87: wb.v2.sgroups.SecGroupService.FindSgSgRules:output_type -> wb.v2.sgroups.SgSgRulesResp
	37, // 88: wb.v2.sgroups.SecGroupService.FindFqdnRules:output_type -> wb.v2.sgroups.FqdnRulesResp
	39, // 89: wb.v2.sgroups.SecGroupService.FindSgIcmpRules:output_type -> wb.v2.sgroups.SgIcmpRulesResp
	41, // 90: wb.v2.sgroups.SecGroupService.FindSgSgIcmpRules:output_type -> wb.v2.sgroups.SgSgIcmpRulesResp
	43, // 91: wb.v2.sgroups.SecGroupService.FindIECidrSgRules:output_type -> wb.v2.sgroups.IECidrSgRulesResp
	45, // 92: wb.v2.sgroups.SecGroupService.FindIESgSgRules:output_type -> wb.v2.sgroups.IESgSgRulesResp
	47, // 93: wb.v2.sgroups.SecGroupService.FindIESgSgIcmpRules:output_type -> wb.v2.sgroups.IESgSgIcmpRulesResp
	49, // 94: wb.v2.sgroups.SecGroupService.FindIECidrSgIcmpRules:output_type -> wb.v2.sgroups.IECidrSgIcmpRulesResp
	4,  // 95: wb.v2.sgroups.SecGroupService.GetSecGroupForAddress:output_type -> wb.v2.sgroups.SecGroup
	81, // [81:96] is the sub-list for method output_type
	66, // [66:81] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_sgroups_api_proto_init() }
func file_sgroups_api_proto_init() {
	if File_sgroups_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sgroups_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SecGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AccPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RulePriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SgSgRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FqdnRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SgIcmpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SgSgIcmpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*IECidrSgRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*IECidrSgIcmpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*IESgSgRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*IESgSgIcmpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SyncStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SyncSgSgRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SyncFqdnRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SyncSecurityGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SyncNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SyncSgIcmpRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SyncSgSgIcmpRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SyncIECidrSgRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SyncIESgSgRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SyncIESgSgIcmpRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SyncIECidrSgIcmpRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ListNetworksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ListNetworksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ListSecurityGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ListSecurityGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetSgSubnetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetSgSubnetsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetSgSgRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*FindSgSgRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SgSgRulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*FindFqdnRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*FqdnRulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*FindSgIcmpRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*SgIcmpRulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*FindSgSgIcmpRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*SgSgIcmpRulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*FindIECidrSgRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*IECidrSgRulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*FindIESgSgRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*IESgSgRulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*FindIESgSgIcmpRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*IESgSgIcmpRulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*FindIECidrSgIcmpRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*IECidrSgIcmpRulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*GetSecGroupForAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sgroups_api_proto_msgTypes[3].OneofWrappers = []any{
		(*RulePriority_Some)(nil),
	}
	file_sgroups_api_proto_msgTypes[27].OneofWrappers = []any{
		(*SyncReq_Groups)(nil),
		(*SyncReq_Networks)(nil),
		(*SyncReq_SgSgRules)(nil),
		(*SyncReq_FqdnRules)(nil),
		(*SyncReq_SgIcmpRules)(nil),
		(*SyncReq_SgSgIcmpRules)(nil),
		(*SyncReq_IeCidrSgRules)(nil),
		(*SyncReq_IeSgSgRules)(nil),
		(*SyncReq_IeSgSgIcmpRules)(nil),
		(*SyncReq_IeCidrSgIcmpRules)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sgroups_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sgroups_api_proto_goTypes,
		DependencyIndexes: file_sgroups_api_proto_depIdxs,
		EnumInfos:         file_sgroups_api_proto_enumTypes,
		MessageInfos:      file_sgroups_api_proto_msgTypes,
	}.Build()
	File_sgroups_api_proto = out.File
	file_sgroups_api_proto_rawDesc = nil
	file_sgroups_api_proto_goTypes = nil
	file_sgroups_api_proto_depIdxs = nil
}
