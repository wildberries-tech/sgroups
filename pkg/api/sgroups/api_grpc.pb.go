// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: sgroups/api.proto

package sgroups

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecGroupService_Sync_FullMethodName                  = "/wb.v2.sgroups.SecGroupService/Sync"
	SecGroupService_SyncStatus_FullMethodName            = "/wb.v2.sgroups.SecGroupService/SyncStatus"
	SecGroupService_SyncStatuses_FullMethodName          = "/wb.v2.sgroups.SecGroupService/SyncStatuses"
	SecGroupService_ListNetworks_FullMethodName          = "/wb.v2.sgroups.SecGroupService/ListNetworks"
	SecGroupService_ListSecurityGroups_FullMethodName    = "/wb.v2.sgroups.SecGroupService/ListSecurityGroups"
	SecGroupService_GetSgSubnets_FullMethodName          = "/wb.v2.sgroups.SecGroupService/GetSgSubnets"
	SecGroupService_FindSgSgRules_FullMethodName         = "/wb.v2.sgroups.SecGroupService/FindSgSgRules"
	SecGroupService_FindFqdnRules_FullMethodName         = "/wb.v2.sgroups.SecGroupService/FindFqdnRules"
	SecGroupService_FindSgIcmpRules_FullMethodName       = "/wb.v2.sgroups.SecGroupService/FindSgIcmpRules"
	SecGroupService_FindSgSgIcmpRules_FullMethodName     = "/wb.v2.sgroups.SecGroupService/FindSgSgIcmpRules"
	SecGroupService_FindIECidrSgRules_FullMethodName     = "/wb.v2.sgroups.SecGroupService/FindIECidrSgRules"
	SecGroupService_FindIESgSgRules_FullMethodName       = "/wb.v2.sgroups.SecGroupService/FindIESgSgRules"
	SecGroupService_FindIESgSgIcmpRules_FullMethodName   = "/wb.v2.sgroups.SecGroupService/FindIESgSgIcmpRules"
	SecGroupService_FindIECidrSgIcmpRules_FullMethodName = "/wb.v2.sgroups.SecGroupService/FindIECidrSgIcmpRules"
	SecGroupService_GetSecGroupForAddress_FullMethodName = "/wb.v2.sgroups.SecGroupService/GetSecGroupForAddress"
)

// SecGroupServiceClient is the client API for SecGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecGroupServiceClient interface {
	Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncStatusResp, error)
	SyncStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SecGroupService_SyncStatusesClient, error)
	ListNetworks(ctx context.Context, in *ListNetworksReq, opts ...grpc.CallOption) (*ListNetworksResp, error)
	ListSecurityGroups(ctx context.Context, in *ListSecurityGroupsReq, opts ...grpc.CallOption) (*ListSecurityGroupsResp, error)
	GetSgSubnets(ctx context.Context, in *GetSgSubnetsReq, opts ...grpc.CallOption) (*GetSgSubnetsResp, error)
	FindSgSgRules(ctx context.Context, in *FindSgSgRulesReq, opts ...grpc.CallOption) (*SgSgRulesResp, error)
	FindFqdnRules(ctx context.Context, in *FindFqdnRulesReq, opts ...grpc.CallOption) (*FqdnRulesResp, error)
	FindSgIcmpRules(ctx context.Context, in *FindSgIcmpRulesReq, opts ...grpc.CallOption) (*SgIcmpRulesResp, error)
	FindSgSgIcmpRules(ctx context.Context, in *FindSgSgIcmpRulesReq, opts ...grpc.CallOption) (*SgSgIcmpRulesResp, error)
	FindIECidrSgRules(ctx context.Context, in *FindIECidrSgRulesReq, opts ...grpc.CallOption) (*IECidrSgRulesResp, error)
	FindIESgSgRules(ctx context.Context, in *FindIESgSgRulesReq, opts ...grpc.CallOption) (*IESgSgRulesResp, error)
	FindIESgSgIcmpRules(ctx context.Context, in *FindIESgSgIcmpRulesReq, opts ...grpc.CallOption) (*IESgSgIcmpRulesResp, error)
	FindIECidrSgIcmpRules(ctx context.Context, in *FindIECidrSgIcmpRulesReq, opts ...grpc.CallOption) (*IECidrSgIcmpRulesResp, error)
	GetSecGroupForAddress(ctx context.Context, in *GetSecGroupForAddressReq, opts ...grpc.CallOption) (*SecGroup, error)
}

type secGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecGroupServiceClient(cc grpc.ClientConnInterface) SecGroupServiceClient {
	return &secGroupServiceClient{cc}
}

func (c *secGroupServiceClient) Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecGroupService_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) SyncStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncStatusResp, error) {
	out := new(SyncStatusResp)
	err := c.cc.Invoke(ctx, SecGroupService_SyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) SyncStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SecGroupService_SyncStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecGroupService_ServiceDesc.Streams[0], SecGroupService_SyncStatuses_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &secGroupServiceSyncStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecGroupService_SyncStatusesClient interface {
	Recv() (*SyncStatusResp, error)
	grpc.ClientStream
}

type secGroupServiceSyncStatusesClient struct {
	grpc.ClientStream
}

func (x *secGroupServiceSyncStatusesClient) Recv() (*SyncStatusResp, error) {
	m := new(SyncStatusResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *secGroupServiceClient) ListNetworks(ctx context.Context, in *ListNetworksReq, opts ...grpc.CallOption) (*ListNetworksResp, error) {
	out := new(ListNetworksResp)
	err := c.cc.Invoke(ctx, SecGroupService_ListNetworks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) ListSecurityGroups(ctx context.Context, in *ListSecurityGroupsReq, opts ...grpc.CallOption) (*ListSecurityGroupsResp, error) {
	out := new(ListSecurityGroupsResp)
	err := c.cc.Invoke(ctx, SecGroupService_ListSecurityGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) GetSgSubnets(ctx context.Context, in *GetSgSubnetsReq, opts ...grpc.CallOption) (*GetSgSubnetsResp, error) {
	out := new(GetSgSubnetsResp)
	err := c.cc.Invoke(ctx, SecGroupService_GetSgSubnets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) FindSgSgRules(ctx context.Context, in *FindSgSgRulesReq, opts ...grpc.CallOption) (*SgSgRulesResp, error) {
	out := new(SgSgRulesResp)
	err := c.cc.Invoke(ctx, SecGroupService_FindSgSgRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) FindFqdnRules(ctx context.Context, in *FindFqdnRulesReq, opts ...grpc.CallOption) (*FqdnRulesResp, error) {
	out := new(FqdnRulesResp)
	err := c.cc.Invoke(ctx, SecGroupService_FindFqdnRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) FindSgIcmpRules(ctx context.Context, in *FindSgIcmpRulesReq, opts ...grpc.CallOption) (*SgIcmpRulesResp, error) {
	out := new(SgIcmpRulesResp)
	err := c.cc.Invoke(ctx, SecGroupService_FindSgIcmpRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) FindSgSgIcmpRules(ctx context.Context, in *FindSgSgIcmpRulesReq, opts ...grpc.CallOption) (*SgSgIcmpRulesResp, error) {
	out := new(SgSgIcmpRulesResp)
	err := c.cc.Invoke(ctx, SecGroupService_FindSgSgIcmpRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) FindIECidrSgRules(ctx context.Context, in *FindIECidrSgRulesReq, opts ...grpc.CallOption) (*IECidrSgRulesResp, error) {
	out := new(IECidrSgRulesResp)
	err := c.cc.Invoke(ctx, SecGroupService_FindIECidrSgRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) FindIESgSgRules(ctx context.Context, in *FindIESgSgRulesReq, opts ...grpc.CallOption) (*IESgSgRulesResp, error) {
	out := new(IESgSgRulesResp)
	err := c.cc.Invoke(ctx, SecGroupService_FindIESgSgRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) FindIESgSgIcmpRules(ctx context.Context, in *FindIESgSgIcmpRulesReq, opts ...grpc.CallOption) (*IESgSgIcmpRulesResp, error) {
	out := new(IESgSgIcmpRulesResp)
	err := c.cc.Invoke(ctx, SecGroupService_FindIESgSgIcmpRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) FindIECidrSgIcmpRules(ctx context.Context, in *FindIECidrSgIcmpRulesReq, opts ...grpc.CallOption) (*IECidrSgIcmpRulesResp, error) {
	out := new(IECidrSgIcmpRulesResp)
	err := c.cc.Invoke(ctx, SecGroupService_FindIECidrSgIcmpRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secGroupServiceClient) GetSecGroupForAddress(ctx context.Context, in *GetSecGroupForAddressReq, opts ...grpc.CallOption) (*SecGroup, error) {
	out := new(SecGroup)
	err := c.cc.Invoke(ctx, SecGroupService_GetSecGroupForAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecGroupServiceServer is the server API for SecGroupService service.
// All implementations must embed UnimplementedSecGroupServiceServer
// for forward compatibility
type SecGroupServiceServer interface {
	Sync(context.Context, *SyncReq) (*emptypb.Empty, error)
	SyncStatus(context.Context, *emptypb.Empty) (*SyncStatusResp, error)
	SyncStatuses(*emptypb.Empty, SecGroupService_SyncStatusesServer) error
	ListNetworks(context.Context, *ListNetworksReq) (*ListNetworksResp, error)
	ListSecurityGroups(context.Context, *ListSecurityGroupsReq) (*ListSecurityGroupsResp, error)
	GetSgSubnets(context.Context, *GetSgSubnetsReq) (*GetSgSubnetsResp, error)
	FindSgSgRules(context.Context, *FindSgSgRulesReq) (*SgSgRulesResp, error)
	FindFqdnRules(context.Context, *FindFqdnRulesReq) (*FqdnRulesResp, error)
	FindSgIcmpRules(context.Context, *FindSgIcmpRulesReq) (*SgIcmpRulesResp, error)
	FindSgSgIcmpRules(context.Context, *FindSgSgIcmpRulesReq) (*SgSgIcmpRulesResp, error)
	FindIECidrSgRules(context.Context, *FindIECidrSgRulesReq) (*IECidrSgRulesResp, error)
	FindIESgSgRules(context.Context, *FindIESgSgRulesReq) (*IESgSgRulesResp, error)
	FindIESgSgIcmpRules(context.Context, *FindIESgSgIcmpRulesReq) (*IESgSgIcmpRulesResp, error)
	FindIECidrSgIcmpRules(context.Context, *FindIECidrSgIcmpRulesReq) (*IECidrSgIcmpRulesResp, error)
	GetSecGroupForAddress(context.Context, *GetSecGroupForAddressReq) (*SecGroup, error)
	mustEmbedUnimplementedSecGroupServiceServer()
}

// UnimplementedSecGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecGroupServiceServer struct {
}

func (UnimplementedSecGroupServiceServer) Sync(context.Context, *SyncReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedSecGroupServiceServer) SyncStatus(context.Context, *emptypb.Empty) (*SyncStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncStatus not implemented")
}
func (UnimplementedSecGroupServiceServer) SyncStatuses(*emptypb.Empty, SecGroupService_SyncStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncStatuses not implemented")
}
func (UnimplementedSecGroupServiceServer) ListNetworks(context.Context, *ListNetworksReq) (*ListNetworksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedSecGroupServiceServer) ListSecurityGroups(context.Context, *ListSecurityGroupsReq) (*ListSecurityGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityGroups not implemented")
}
func (UnimplementedSecGroupServiceServer) GetSgSubnets(context.Context, *GetSgSubnetsReq) (*GetSgSubnetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSgSubnets not implemented")
}
func (UnimplementedSecGroupServiceServer) FindSgSgRules(context.Context, *FindSgSgRulesReq) (*SgSgRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSgSgRules not implemented")
}
func (UnimplementedSecGroupServiceServer) FindFqdnRules(context.Context, *FindFqdnRulesReq) (*FqdnRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFqdnRules not implemented")
}
func (UnimplementedSecGroupServiceServer) FindSgIcmpRules(context.Context, *FindSgIcmpRulesReq) (*SgIcmpRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSgIcmpRules not implemented")
}
func (UnimplementedSecGroupServiceServer) FindSgSgIcmpRules(context.Context, *FindSgSgIcmpRulesReq) (*SgSgIcmpRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSgSgIcmpRules not implemented")
}
func (UnimplementedSecGroupServiceServer) FindIECidrSgRules(context.Context, *FindIECidrSgRulesReq) (*IECidrSgRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindIECidrSgRules not implemented")
}
func (UnimplementedSecGroupServiceServer) FindIESgSgRules(context.Context, *FindIESgSgRulesReq) (*IESgSgRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindIESgSgRules not implemented")
}
func (UnimplementedSecGroupServiceServer) FindIESgSgIcmpRules(context.Context, *FindIESgSgIcmpRulesReq) (*IESgSgIcmpRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindIESgSgIcmpRules not implemented")
}
func (UnimplementedSecGroupServiceServer) FindIECidrSgIcmpRules(context.Context, *FindIECidrSgIcmpRulesReq) (*IECidrSgIcmpRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindIECidrSgIcmpRules not implemented")
}
func (UnimplementedSecGroupServiceServer) GetSecGroupForAddress(context.Context, *GetSecGroupForAddressReq) (*SecGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecGroupForAddress not implemented")
}
func (UnimplementedSecGroupServiceServer) mustEmbedUnimplementedSecGroupServiceServer() {}

// UnsafeSecGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecGroupServiceServer will
// result in compilation errors.
type UnsafeSecGroupServiceServer interface {
	mustEmbedUnimplementedSecGroupServiceServer()
}

func RegisterSecGroupServiceServer(s grpc.ServiceRegistrar, srv SecGroupServiceServer) {
	s.RegisterService(&SecGroupService_ServiceDesc, srv)
}

func _SecGroupService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).Sync(ctx, req.(*SyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_SyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).SyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_SyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).SyncStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_SyncStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecGroupServiceServer).SyncStatuses(m, &secGroupServiceSyncStatusesServer{stream})
}

type SecGroupService_SyncStatusesServer interface {
	Send(*SyncStatusResp) error
	grpc.ServerStream
}

type secGroupServiceSyncStatusesServer struct {
	grpc.ServerStream
}

func (x *secGroupServiceSyncStatusesServer) Send(m *SyncStatusResp) error {
	return x.ServerStream.SendMsg(m)
}

func _SecGroupService_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).ListNetworks(ctx, req.(*ListNetworksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_ListSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).ListSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_ListSecurityGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).ListSecurityGroups(ctx, req.(*ListSecurityGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_GetSgSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSgSubnetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).GetSgSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_GetSgSubnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).GetSgSubnets(ctx, req.(*GetSgSubnetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_FindSgSgRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSgSgRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).FindSgSgRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_FindSgSgRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).FindSgSgRules(ctx, req.(*FindSgSgRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_FindFqdnRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFqdnRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).FindFqdnRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_FindFqdnRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).FindFqdnRules(ctx, req.(*FindFqdnRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_FindSgIcmpRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSgIcmpRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).FindSgIcmpRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_FindSgIcmpRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).FindSgIcmpRules(ctx, req.(*FindSgIcmpRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_FindSgSgIcmpRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSgSgIcmpRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).FindSgSgIcmpRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_FindSgSgIcmpRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).FindSgSgIcmpRules(ctx, req.(*FindSgSgIcmpRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_FindIECidrSgRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindIECidrSgRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).FindIECidrSgRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_FindIECidrSgRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).FindIECidrSgRules(ctx, req.(*FindIECidrSgRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_FindIESgSgRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindIESgSgRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).FindIESgSgRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_FindIESgSgRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).FindIESgSgRules(ctx, req.(*FindIESgSgRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_FindIESgSgIcmpRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindIESgSgIcmpRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).FindIESgSgIcmpRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_FindIESgSgIcmpRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).FindIESgSgIcmpRules(ctx, req.(*FindIESgSgIcmpRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_FindIECidrSgIcmpRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindIECidrSgIcmpRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).FindIECidrSgIcmpRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_FindIECidrSgIcmpRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).FindIECidrSgIcmpRules(ctx, req.(*FindIECidrSgIcmpRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecGroupService_GetSecGroupForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecGroupForAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecGroupServiceServer).GetSecGroupForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecGroupService_GetSecGroupForAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecGroupServiceServer).GetSecGroupForAddress(ctx, req.(*GetSecGroupForAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SecGroupService_ServiceDesc is the grpc.ServiceDesc for SecGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wb.v2.sgroups.SecGroupService",
	HandlerType: (*SecGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _SecGroupService_Sync_Handler,
		},
		{
			MethodName: "SyncStatus",
			Handler:    _SecGroupService_SyncStatus_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _SecGroupService_ListNetworks_Handler,
		},
		{
			MethodName: "ListSecurityGroups",
			Handler:    _SecGroupService_ListSecurityGroups_Handler,
		},
		{
			MethodName: "GetSgSubnets",
			Handler:    _SecGroupService_GetSgSubnets_Handler,
		},
		{
			MethodName: "FindSgSgRules",
			Handler:    _SecGroupService_FindSgSgRules_Handler,
		},
		{
			MethodName: "FindFqdnRules",
			Handler:    _SecGroupService_FindFqdnRules_Handler,
		},
		{
			MethodName: "FindSgIcmpRules",
			Handler:    _SecGroupService_FindSgIcmpRules_Handler,
		},
		{
			MethodName: "FindSgSgIcmpRules",
			Handler:    _SecGroupService_FindSgSgIcmpRules_Handler,
		},
		{
			MethodName: "FindIECidrSgRules",
			Handler:    _SecGroupService_FindIECidrSgRules_Handler,
		},
		{
			MethodName: "FindIESgSgRules",
			Handler:    _SecGroupService_FindIESgSgRules_Handler,
		},
		{
			MethodName: "FindIESgSgIcmpRules",
			Handler:    _SecGroupService_FindIESgSgIcmpRules_Handler,
		},
		{
			MethodName: "FindIECidrSgIcmpRules",
			Handler:    _SecGroupService_FindIECidrSgIcmpRules_Handler,
		},
		{
			MethodName: "GetSecGroupForAddress",
			Handler:    _SecGroupService_GetSecGroupForAddress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncStatuses",
			Handler:       _SecGroupService_SyncStatuses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sgroups/api.proto",
}
